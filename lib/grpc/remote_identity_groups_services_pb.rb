# Copyright 2020 StrongDM Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: remote_identity_groups.proto for package 'v1'

require "grpc"
require "remote_identity_groups_pb"

module V1
  module RemoteIdentityGroups
    # A RemoteIdentityGroup is a named grouping of Remote Identities for Accounts.
    # An Account's relationship to a RemoteIdentityGroup is defined via RemoteIdentity objects.
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = "v1.RemoteIdentityGroups"

      # // Create registers a new RemoteIdentityGroup.
      # rpc Create(RemoteIdentityGroupCreateRequest) returns (RemoteIdentityGroupCreateResponse) {
      #     option (v1.method_options).method = "post";
      #     option (v1.method_options).url = "/v1/remote-identity-groups";
      # }
      #
      # Get reads one RemoteIdentityGroup by ID.
      rpc :Get, ::V1::RemoteIdentityGroupGetRequest, ::V1::RemoteIdentityGroupGetResponse
      # // Update replaces all the fields of a RemoteIdentityGroup by ID.
      # rpc Update(RemoteIdentityGroupUpdateRequest) returns (RemoteIdentityGroupUpdateResponse) {
      #     option (v1.method_options).method = "put";
      #     option (v1.method_options).url = "/v1/remote-identity-groups/{id}";
      # }
      #
      # // Delete removes a RemoteIdentityGroup by ID.
      # rpc Delete(RemoteIdentityGroupDeleteRequest) returns (RemoteIdentityGroupDeleteResponse) {
      #     option (v1.method_options).method = "delete";
      #     option (v1.method_options).url = "/v1/remote-identity-groups/{id}";
      # }
      #
      # List gets a list of RemoteIdentityGroups matching a given set of criteria.
      rpc :List, ::V1::RemoteIdentityGroupListRequest, ::V1::RemoteIdentityGroupListResponse
    end

    Stub = Service.rpc_stub_class
  end
end
