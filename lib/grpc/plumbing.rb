# Copyright 2020 StrongDM Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# @internal This file was generated by protogen. DO NOT EDIT.

require "grpc"
require "google/protobuf/well_known_types"
require "json"
require_relative "./options_pb"
require_relative "./spec_pb"
require_relative "./account_attachments_pb"
require_relative "./account_grants_pb"
require_relative "./tags_pb"
require_relative "./accounts_pb"
require_relative "./control_panel_pb"
require_relative "./drivers_pb"
require_relative "./nodes_pb"
require_relative "./remote_identities_pb"
require_relative "./remote_identity_groups_pb"
require_relative "./resources_pb"
require_relative "./roles_pb"
require_relative "./secret_store_types_pb"
require_relative "./secret_stores_pb"
require_relative "../models/porcelain"
require_relative "../errors/errors"

module SDM
  module Plumbing
    def self.quote_filter_args(filter, *args)
      parts = (filter + " ").split("?")
      if parts.length() != args.length() + 1
        raise BadRequestError.new("incorrect number of replacements")
      end
      b = ""
      parts.each_with_index do |v, i|
        b += v
        if i < args.length()
          s = args[i].to_s()
          s = JSON.dump(s)
          b += s
        end
      end
      return b
    end

    def self.convert_timestamp_to_porcelain(t)
      if t == nil
        return nil
      end
      return Time.at(t.seconds + t.nanos * (10 ** -9))
    end

    def self.convert_timestamp_to_plumbing(t)
      if t == nil
        return nil
      end
      return Google::Protobuf::Timestamp.new(seconds: t.to_i, nanos: t.nsec)
    end

    def self.convert_tags_to_porcelain(t)
      if t == nil
        return nil
      end
      res = {}
      t.pairs.each do |pair|
        res[pair.name] = pair.value
      end
      res
    end

    def self.convert_tags_to_plumbing(t)
      if t == nil
        return nil
      end
      tags = V1::Tags.new()
      t.each do |key, value|
        pair = V1::Tags::Pair.new()
        pair.name = key
        pair.value = value
        tags.pairs.push(pair)
      end
      tags
    end

    def self.convert_access_rules_to_porcelain(access_rules_json)
      if access_rules_json == nil
        return nil
      end
      if access_rules_json == ""
        return nil
      end
      JSON.parse(access_rules_json)
    end

    def self.convert_access_rules_to_plumbing(access_rules)
      if access_rules == nil
        return nil
      end
      JSON.dump(access_rules)
    end
    def self.convert_aks_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKS.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aks_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKS.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aks_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aks_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aks_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_service_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSServiceAccount.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_aks_service_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSServiceAccount.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_aks_service_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_service_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_service_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_service_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_service_account_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSServiceAccountUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSServiceAccountUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_aks_service_account_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_service_account_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_service_account_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aks_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aks_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWS.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_region = (plumbing.healthcheck_region)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWS.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_region = (porcelain.healthcheck_region)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_console_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSConsole.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.enable_env_variables = (plumbing.enable_env_variables)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_console_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSConsole.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.enable_env_variables = (porcelain.enable_env_variables)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_console_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_console_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_console_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_console_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_console_static_key_pair_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSConsoleStaticKeyPair.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_console_static_key_pair_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSConsoleStaticKeyPair.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_console_static_key_pair_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_console_static_key_pair_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_console_static_key_pair_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_console_static_key_pair_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.region = (plumbing.region)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.region = (porcelain.region)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Account.new()
      if porcelain.instance_of? Service
        plumbing.service = convert_service_to_plumbing(porcelain)
      end
      if porcelain.instance_of? User
        plumbing.user = convert_user_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.service != nil
        return convert_service_to_porcelain(plumbing.service)
      end
      if plumbing.user != nil
        return convert_user_to_porcelain(plumbing.user)
      end
    end
    def self.convert_repeated_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachment.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_account_attachment_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachment.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_account_attachment_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentCreateResponse.new()
      porcelain.account_attachment = convert_account_attachment_to_porcelain(plumbing.account_attachment)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentCreateResponse.new()
      plumbing.account_attachment = convert_account_attachment_to_plumbing(porcelain.account_attachment)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentGetResponse.new()
      porcelain.account_attachment = convert_account_attachment_to_porcelain(plumbing.account_attachment)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentGetResponse.new()
      plumbing.account_attachment = convert_account_attachment_to_plumbing(porcelain.account_attachment)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountCreateResponse.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_account_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountCreateResponse.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_account_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGetResponse.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGetResponse.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrant.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.start_from = convert_timestamp_to_porcelain(plumbing.start_from)
      porcelain.valid_until = convert_timestamp_to_porcelain(plumbing.valid_until)
      porcelain
    end

    def self.convert_account_grant_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrant.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.start_from = convert_timestamp_to_plumbing(porcelain.start_from)
      plumbing.valid_until = convert_timestamp_to_plumbing(porcelain.valid_until)
      plumbing
    end
    def self.convert_repeated_account_grant_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantCreateResponse.new()
      porcelain.account_grant = convert_account_grant_to_porcelain(plumbing.account_grant)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantCreateResponse.new()
      plumbing.account_grant = convert_account_grant_to_plumbing(porcelain.account_grant)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantGetResponse.new()
      porcelain.account_grant = convert_account_grant_to_porcelain(plumbing.account_grant)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantGetResponse.new()
      plumbing.account_grant = convert_account_grant_to_plumbing(porcelain.account_grant)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountUpdateResponse.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountUpdateResponse.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKS.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.region = (plumbing.region)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKS.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.region = (porcelain.region)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKSUserImpersonation.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKSUserImpersonation.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_es_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonES.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_es_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonES.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_es_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_es_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_es_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_es_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_mqamqp_091_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonMQAMQP091.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_amazon_mqamqp_091_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonMQAMQP091.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_amazon_mqamqp_091_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_mqamqp_091_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_mqamqp_091_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_mqamqp_091_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_athena_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Athena.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.output = (plumbing.output)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_athena_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Athena.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.output = (porcelain.output)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_athena_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_athena_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_athena_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_athena_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraMysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraMysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraPostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraPostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Azure.new()
      porcelain.app_id = (plumbing.app_id)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_id = (plumbing.tenant_id)
      porcelain
    end

    def self.convert_azure_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Azure.new()
      plumbing.app_id = (porcelain.app_id)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_id = (porcelain.tenant_id)
      plumbing
    end
    def self.convert_repeated_azure_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_certificate_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzureCertificate.new()
      porcelain.app_id = (plumbing.app_id)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_id = (plumbing.tenant_id)
      porcelain
    end

    def self.convert_azure_certificate_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzureCertificate.new()
      plumbing.app_id = (porcelain.app_id)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_id = (porcelain.tenant_id)
      plumbing
    end
    def self.convert_repeated_azure_certificate_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_certificate_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_certificate_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_certificate_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzurePostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_azure_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzurePostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_azure_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzureStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.vault_uri = (plumbing.vault_uri)
      porcelain
    end

    def self.convert_azure_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzureStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.vault_uri = (porcelain.vault_uri)
      plumbing
    end
    def self.convert_repeated_azure_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_big_query_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = BigQuery.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.private_key = (plumbing.private_key)
      porcelain.project = (plumbing.project)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_big_query_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::BigQuery.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.private_key = (porcelain.private_key)
      plumbing.project = (porcelain.project)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_big_query_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_big_query_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_big_query_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_big_query_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cassandra_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Cassandra.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_cassandra_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Cassandra.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_cassandra_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cassandra_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cassandra_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cassandra_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_citus_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Citus.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_citus_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Citus.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_citus_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_citus_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_citus_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_citus_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_clustrix_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Clustrix.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_clustrix_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Clustrix.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_clustrix_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_clustrix_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_clustrix_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_clustrix_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cockroach_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Cockroach.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_cockroach_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Cockroach.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_cockroach_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cockroach_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cockroach_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cockroach_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_control_panel_get_sshca_public_key_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ControlPanelGetSSHCAPublicKeyResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.public_key = (plumbing.public_key)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_control_panel_get_sshca_public_key_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ControlPanelGetSSHCAPublicKeyResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.public_key = (porcelain.public_key)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_control_panel_get_sshca_public_key_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_control_panel_get_sshca_public_key_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_control_panel_get_sshca_public_key_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_control_panel_get_sshca_public_key_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_control_panel_verify_jwt_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ControlPanelVerifyJWTResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.valid = (plumbing.valid)
      porcelain
    end

    def self.convert_control_panel_verify_jwt_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ControlPanelVerifyJWTResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.valid = (porcelain.valid)
      plumbing
    end
    def self.convert_repeated_control_panel_verify_jwt_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_control_panel_verify_jwt_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_control_panel_verify_jwt_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_control_panel_verify_jwt_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_create_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CreateResponseMetadata.new()
      porcelain
    end

    def self.convert_create_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CreateResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_create_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_create_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_create_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_create_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cyberark_conjur_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CyberarkConjurStore.new()
      porcelain.appurl = (plumbing.appURL)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_cyberark_conjur_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CyberarkConjurStore.new()
      plumbing.appURL = (porcelain.appurl)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_cyberark_conjur_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cyberark_conjur_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cyberark_conjur_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cyberark_conjur_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cyberark_pam_experimental_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CyberarkPAMExperimentalStore.new()
      porcelain.appurl = (plumbing.appURL)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CyberarkPAMExperimentalStore.new()
      plumbing.appURL = (porcelain.appurl)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_cyberark_pam_experimental_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cyberark_pam_experimental_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cyberark_pam_experimental_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_db_2_i_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DB2I.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_db_2_i_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DB2I.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_db_2_i_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_db_2_i_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_db_2_i_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_db_2_i_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_db_2_luw_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DB2LUW.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_db_2_luw_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DB2LUW.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_db_2_luw_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_db_2_luw_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_db_2_luw_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_db_2_luw_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_delete_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DeleteResponseMetadata.new()
      porcelain
    end

    def self.convert_delete_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DeleteResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_delete_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_delete_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_delete_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_delete_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_delinea_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DelineaStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.server_url = (plumbing.server_url)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_name = (plumbing.tenant_name)
      porcelain
    end

    def self.convert_delinea_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DelineaStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.server_url = (porcelain.server_url)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_name = (porcelain.tenant_name)
      plumbing
    end
    def self.convert_repeated_delinea_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_delinea_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_delinea_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_delinea_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_document_db_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_document_db_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_replica_set_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBReplicaSet.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_document_db_replica_set_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBReplicaSet.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_document_db_replica_set_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_replica_set_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_replica_set_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_replica_set_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_druid_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Druid.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_druid_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Druid.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_druid_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_druid_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_druid_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_druid_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_dynamo_db_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DynamoDB.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_dynamo_db_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DynamoDB.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_dynamo_db_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_dynamo_db_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_dynamo_db_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_dynamo_db_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_elastic_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Elastic.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_elastic_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Elastic.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_elastic_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_elastic_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_elastic_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_elastic_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_elasticache_redis_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ElasticacheRedis.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain
    end

    def self.convert_elasticache_redis_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ElasticacheRedis.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing
    end
    def self.convert_repeated_elasticache_redis_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_elasticache_redis_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_elasticache_redis_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_elasticache_redis_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.keyfile = (plumbing.keyfile)
      porcelain.name = (plumbing.name)
      porcelain.scopes = (plumbing.scopes)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gcp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.keyfile = (porcelain.keyfile)
      plumbing.name = (porcelain.name)
      plumbing.scopes = (porcelain.scopes)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gcp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCPStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.projectid = (plumbing.projectID)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gcp_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCPStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.projectID = (porcelain.projectid)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gcp_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gateway_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Gateway.new()
      porcelain.bind_address = (plumbing.bind_address)
      porcelain.gateway_filter = (plumbing.gateway_filter)
      porcelain.id = (plumbing.id)
      porcelain.listen_address = (plumbing.listen_address)
      porcelain.name = (plumbing.name)
      porcelain.state = (plumbing.state)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gateway_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Gateway.new()
      plumbing.bind_address = (porcelain.bind_address)
      plumbing.gateway_filter = (porcelain.gateway_filter)
      plumbing.id = (porcelain.id)
      plumbing.listen_address = (porcelain.listen_address)
      plumbing.name = (porcelain.name)
      plumbing.state = (porcelain.state)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gateway_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gateway_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gateway_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gateway_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_get_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GetResponseMetadata.new()
      porcelain
    end

    def self.convert_get_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GetResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_get_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_get_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_get_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_get_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_google_gke_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GoogleGKE.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.service_account_key = (plumbing.service_account_key)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_google_gke_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GoogleGKE.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.service_account_key = (porcelain.service_account_key)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_google_gke_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_google_gke_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_google_gke_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_google_gke_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_google_gke_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GoogleGKEUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.service_account_key = (plumbing.service_account_key)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_google_gke_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GoogleGKEUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.service_account_key = (porcelain.service_account_key)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_google_gke_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_google_gke_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_google_gke_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_google_gke_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_greenplum_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Greenplum.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_greenplum_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Greenplum.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_greenplum_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_greenplum_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_greenplum_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_greenplum_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPAuth.new()
      porcelain.auth_header = (plumbing.auth_header)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain
    end

    def self.convert_http_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPAuth.new()
      plumbing.auth_header = (porcelain.auth_header)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing
    end
    def self.convert_repeated_http_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_http_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_http_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_no_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPNoAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain
    end

    def self.convert_http_no_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPNoAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing
    end
    def self.convert_repeated_http_no_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_no_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_no_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_no_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Kubernetes.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_kubernetes_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Kubernetes.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_kubernetes_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_kubernetes_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_kubernetes_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_service_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesServiceAccount.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_kubernetes_service_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesServiceAccount.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_kubernetes_service_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_service_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_service_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_service_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesServiceAccountUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesServiceAccountUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_kubernetes_service_account_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_service_account_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_kubernetes_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_kubernetes_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mtls_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MTLSMysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.server_name = (plumbing.server_name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mtls_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MTLSMysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.server_name = (porcelain.server_name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mtls_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mtls_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mtls_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mtls_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mtls_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MTLSPostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.server_name = (plumbing.server_name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mtls_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MTLSPostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.server_name = (porcelain.server_name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mtls_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mtls_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mtls_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mtls_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_maria_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Maria.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_maria_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Maria.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_maria_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_maria_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_maria_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_maria_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_memcached_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Memcached.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_memcached_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Memcached.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_memcached_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_memcached_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_memcached_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_memcached_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_memsql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Memsql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_memsql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Memsql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_memsql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_memsql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_memsql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_memsql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_legacy_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoLegacyHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_legacy_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoLegacyHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_legacy_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_legacy_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_legacy_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_legacy_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_legacy_replicaset_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoLegacyReplicaset.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_legacy_replicaset_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoLegacyReplicaset.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_legacy_replicaset_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_legacy_replicaset_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_legacy_replicaset_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_legacy_replicaset_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_replica_set_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoReplicaSet.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_replica_set_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoReplicaSet.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_replica_set_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_replica_set_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_replica_set_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_replica_set_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_sharded_cluster_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoShardedCluster.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_sharded_cluster_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoShardedCluster.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_sharded_cluster_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_sharded_cluster_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_sharded_cluster_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_sharded_cluster_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Mysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Mysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_neptune_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Neptune.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_neptune_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Neptune.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_neptune_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_neptune_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_neptune_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_neptune_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_neptune_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NeptuneIAM.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_neptune_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NeptuneIAM.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_neptune_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_neptune_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_neptune_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_neptune_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Node.new()
      if porcelain.instance_of? Gateway
        plumbing.gateway = convert_gateway_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Relay
        plumbing.relay = convert_relay_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_node_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.gateway != nil
        return convert_gateway_to_porcelain(plumbing.gateway)
      end
      if plumbing.relay != nil
        return convert_relay_to_porcelain(plumbing.relay)
      end
    end
    def self.convert_repeated_node_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_node_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_node_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_oracle_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Oracle.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_oracle_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Oracle.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_oracle_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_oracle_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_oracle_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_oracle_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Postgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Postgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_presto_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Presto.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_presto_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Presto.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_presto_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_presto_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_presto_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_presto_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rdp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RDP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.downgrade_nla_connections = (plumbing.downgrade_nla_connections)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rdp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RDP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.downgrade_nla_connections = (porcelain.downgrade_nla_connections)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rdp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rdp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rdp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rdp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rabbit_mqamqp_091_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RabbitMQAMQP091.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rabbit_mqamqp_091_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RabbitMQAMQP091.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rabbit_mqamqp_091_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rabbit_mqamqp_091_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rabbit_mqamqp_091_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rabbit_mqamqp_091_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rate_limit_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RateLimitMetadata.new()
      porcelain.bucket = (plumbing.bucket)
      porcelain.limit = (plumbing.limit)
      porcelain.remaining = (plumbing.remaining)
      porcelain.reset_at = convert_timestamp_to_porcelain(plumbing.reset_at)
      porcelain
    end

    def self.convert_rate_limit_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RateLimitMetadata.new()
      plumbing.bucket = (porcelain.bucket)
      plumbing.limit = (porcelain.limit)
      plumbing.remaining = (porcelain.remaining)
      plumbing.reset_at = convert_timestamp_to_plumbing(porcelain.reset_at)
      plumbing
    end
    def self.convert_repeated_rate_limit_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rate_limit_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rate_limit_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rate_limit_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_raw_tcp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RawTCP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_raw_tcp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RawTCP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_raw_tcp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_raw_tcp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_raw_tcp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_raw_tcp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redis_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Redis.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_redis_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Redis.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_redis_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redis_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redis_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redis_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redshift_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Redshift.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_redshift_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Redshift.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_redshift_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redshift_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redshift_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redshift_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_relay_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Relay.new()
      porcelain.gateway_filter = (plumbing.gateway_filter)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.state = (plumbing.state)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_relay_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Relay.new()
      plumbing.gateway_filter = (porcelain.gateway_filter)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.state = (porcelain.state)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_relay_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_relay_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_relay_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_relay_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentity.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_remote_identity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentity.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_remote_identity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_remote_identity_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_remote_identity_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_group_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGroup.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain
    end

    def self.convert_remote_identity_group_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGroup.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing
    end
    def self.convert_repeated_remote_identity_group_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_group_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_group_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_group_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_group_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGroupGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity_group = convert_remote_identity_group_to_porcelain(plumbing.remote_identity_group)
      porcelain
    end

    def self.convert_remote_identity_group_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGroupGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity_group = convert_remote_identity_group_to_plumbing(porcelain.remote_identity_group)
      plumbing
    end
    def self.convert_repeated_remote_identity_group_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_group_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_group_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_group_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Resource.new()
      if porcelain.instance_of? AKS
        plumbing.aks = convert_aks_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSBasicAuth
        plumbing.aks_basic_auth = convert_aks_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSServiceAccount
        plumbing.aks_service_account = convert_aks_service_account_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSServiceAccountUserImpersonation
        plumbing.aks_service_account_user_impersonation = convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSUserImpersonation
        plumbing.aks_user_impersonation = convert_aks_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKS
        plumbing.amazon_eks = convert_amazon_eks_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKSUserImpersonation
        plumbing.amazon_eks_user_impersonation = convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonES
        plumbing.amazon_es = convert_amazon_es_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonMQAMQP091
        plumbing.amazon_mqamqp_091 = convert_amazon_mqamqp_091_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Athena
        plumbing.athena = convert_athena_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraMysql
        plumbing.aurora_mysql = convert_aurora_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraPostgres
        plumbing.aurora_postgres = convert_aurora_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWS
        plumbing.aws = convert_aws_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSConsole
        plumbing.aws_console = convert_aws_console_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSConsoleStaticKeyPair
        plumbing.aws_console_static_key_pair = convert_aws_console_static_key_pair_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Azure
        plumbing.azure = convert_azure_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzureCertificate
        plumbing.azure_certificate = convert_azure_certificate_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzurePostgres
        plumbing.azure_postgres = convert_azure_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? BigQuery
        plumbing.big_query = convert_big_query_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Cassandra
        plumbing.cassandra = convert_cassandra_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Citus
        plumbing.citus = convert_citus_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Clustrix
        plumbing.clustrix = convert_clustrix_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Cockroach
        plumbing.cockroach = convert_cockroach_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DB2I
        plumbing.db_2_i = convert_db_2_i_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DB2LUW
        plumbing.db_2_luw = convert_db_2_luw_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBHost
        plumbing.document_db_host = convert_document_db_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBReplicaSet
        plumbing.document_db_replica_set = convert_document_db_replica_set_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Druid
        plumbing.druid = convert_druid_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DynamoDB
        plumbing.dynamo_db = convert_dynamo_db_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Elastic
        plumbing.elastic = convert_elastic_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ElasticacheRedis
        plumbing.elasticache_redis = convert_elasticache_redis_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCP
        plumbing.gcp = convert_gcp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GoogleGKE
        plumbing.google_gke = convert_google_gke_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GoogleGKEUserImpersonation
        plumbing.google_gke_user_impersonation = convert_google_gke_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Greenplum
        plumbing.greenplum = convert_greenplum_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPAuth
        plumbing.http_auth = convert_http_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPBasicAuth
        plumbing.http_basic_auth = convert_http_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPNoAuth
        plumbing.http_no_auth = convert_http_no_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Kubernetes
        plumbing.kubernetes = convert_kubernetes_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesBasicAuth
        plumbing.kubernetes_basic_auth = convert_kubernetes_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesServiceAccount
        plumbing.kubernetes_service_account = convert_kubernetes_service_account_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesServiceAccountUserImpersonation
        plumbing.kubernetes_service_account_user_impersonation = convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesUserImpersonation
        plumbing.kubernetes_user_impersonation = convert_kubernetes_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Maria
        plumbing.maria = convert_maria_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Memcached
        plumbing.memcached = convert_memcached_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Memsql
        plumbing.memsql = convert_memsql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoHost
        plumbing.mongo_host = convert_mongo_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoLegacyHost
        plumbing.mongo_legacy_host = convert_mongo_legacy_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoLegacyReplicaset
        plumbing.mongo_legacy_replicaset = convert_mongo_legacy_replicaset_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoReplicaSet
        plumbing.mongo_replica_set = convert_mongo_replica_set_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoShardedCluster
        plumbing.mongo_sharded_cluster = convert_mongo_sharded_cluster_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MTLSMysql
        plumbing.mtls_mysql = convert_mtls_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MTLSPostgres
        plumbing.mtls_postgres = convert_mtls_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Mysql
        plumbing.mysql = convert_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Neptune
        plumbing.neptune = convert_neptune_to_plumbing(porcelain)
      end
      if porcelain.instance_of? NeptuneIAM
        plumbing.neptune_iam = convert_neptune_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Oracle
        plumbing.oracle = convert_oracle_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Postgres
        plumbing.postgres = convert_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Presto
        plumbing.presto = convert_presto_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RabbitMQAMQP091
        plumbing.rabbit_mqamqp_091 = convert_rabbit_mqamqp_091_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RawTCP
        plumbing.raw_tcp = convert_raw_tcp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RDP
        plumbing.rdp = convert_rdp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Redis
        plumbing.redis = convert_redis_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Redshift
        plumbing.redshift = convert_redshift_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SingleStore
        plumbing.single_store = convert_single_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Snowflake
        plumbing.snowflake = convert_snowflake_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Snowsight
        plumbing.snowsight = convert_snowsight_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SQLServer
        plumbing.sql_server = convert_sql_server_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSH
        plumbing.ssh = convert_ssh_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSHCert
        plumbing.ssh_cert = convert_ssh_cert_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSHCustomerKey
        plumbing.ssh_customer_key = convert_ssh_customer_key_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Sybase
        plumbing.sybase = convert_sybase_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SybaseIQ
        plumbing.sybase_iq = convert_sybase_iq_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Teradata
        plumbing.teradata = convert_teradata_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.aks != nil
        return convert_aks_to_porcelain(plumbing.aks)
      end
      if plumbing.aks_basic_auth != nil
        return convert_aks_basic_auth_to_porcelain(plumbing.aks_basic_auth)
      end
      if plumbing.aks_service_account != nil
        return convert_aks_service_account_to_porcelain(plumbing.aks_service_account)
      end
      if plumbing.aks_service_account_user_impersonation != nil
        return convert_aks_service_account_user_impersonation_to_porcelain(plumbing.aks_service_account_user_impersonation)
      end
      if plumbing.aks_user_impersonation != nil
        return convert_aks_user_impersonation_to_porcelain(plumbing.aks_user_impersonation)
      end
      if plumbing.amazon_eks != nil
        return convert_amazon_eks_to_porcelain(plumbing.amazon_eks)
      end
      if plumbing.amazon_eks_user_impersonation != nil
        return convert_amazon_eks_user_impersonation_to_porcelain(plumbing.amazon_eks_user_impersonation)
      end
      if plumbing.amazon_es != nil
        return convert_amazon_es_to_porcelain(plumbing.amazon_es)
      end
      if plumbing.amazon_mqamqp_091 != nil
        return convert_amazon_mqamqp_091_to_porcelain(plumbing.amazon_mqamqp_091)
      end
      if plumbing.athena != nil
        return convert_athena_to_porcelain(plumbing.athena)
      end
      if plumbing.aurora_mysql != nil
        return convert_aurora_mysql_to_porcelain(plumbing.aurora_mysql)
      end
      if plumbing.aurora_postgres != nil
        return convert_aurora_postgres_to_porcelain(plumbing.aurora_postgres)
      end
      if plumbing.aws != nil
        return convert_aws_to_porcelain(plumbing.aws)
      end
      if plumbing.aws_console != nil
        return convert_aws_console_to_porcelain(plumbing.aws_console)
      end
      if plumbing.aws_console_static_key_pair != nil
        return convert_aws_console_static_key_pair_to_porcelain(plumbing.aws_console_static_key_pair)
      end
      if plumbing.azure != nil
        return convert_azure_to_porcelain(plumbing.azure)
      end
      if plumbing.azure_certificate != nil
        return convert_azure_certificate_to_porcelain(plumbing.azure_certificate)
      end
      if plumbing.azure_postgres != nil
        return convert_azure_postgres_to_porcelain(plumbing.azure_postgres)
      end
      if plumbing.big_query != nil
        return convert_big_query_to_porcelain(plumbing.big_query)
      end
      if plumbing.cassandra != nil
        return convert_cassandra_to_porcelain(plumbing.cassandra)
      end
      if plumbing.citus != nil
        return convert_citus_to_porcelain(plumbing.citus)
      end
      if plumbing.clustrix != nil
        return convert_clustrix_to_porcelain(plumbing.clustrix)
      end
      if plumbing.cockroach != nil
        return convert_cockroach_to_porcelain(plumbing.cockroach)
      end
      if plumbing.db_2_i != nil
        return convert_db_2_i_to_porcelain(plumbing.db_2_i)
      end
      if plumbing.db_2_luw != nil
        return convert_db_2_luw_to_porcelain(plumbing.db_2_luw)
      end
      if plumbing.document_db_host != nil
        return convert_document_db_host_to_porcelain(plumbing.document_db_host)
      end
      if plumbing.document_db_replica_set != nil
        return convert_document_db_replica_set_to_porcelain(plumbing.document_db_replica_set)
      end
      if plumbing.druid != nil
        return convert_druid_to_porcelain(plumbing.druid)
      end
      if plumbing.dynamo_db != nil
        return convert_dynamo_db_to_porcelain(plumbing.dynamo_db)
      end
      if plumbing.elastic != nil
        return convert_elastic_to_porcelain(plumbing.elastic)
      end
      if plumbing.elasticache_redis != nil
        return convert_elasticache_redis_to_porcelain(plumbing.elasticache_redis)
      end
      if plumbing.gcp != nil
        return convert_gcp_to_porcelain(plumbing.gcp)
      end
      if plumbing.google_gke != nil
        return convert_google_gke_to_porcelain(plumbing.google_gke)
      end
      if plumbing.google_gke_user_impersonation != nil
        return convert_google_gke_user_impersonation_to_porcelain(plumbing.google_gke_user_impersonation)
      end
      if plumbing.greenplum != nil
        return convert_greenplum_to_porcelain(plumbing.greenplum)
      end
      if plumbing.http_auth != nil
        return convert_http_auth_to_porcelain(plumbing.http_auth)
      end
      if plumbing.http_basic_auth != nil
        return convert_http_basic_auth_to_porcelain(plumbing.http_basic_auth)
      end
      if plumbing.http_no_auth != nil
        return convert_http_no_auth_to_porcelain(plumbing.http_no_auth)
      end
      if plumbing.kubernetes != nil
        return convert_kubernetes_to_porcelain(plumbing.kubernetes)
      end
      if plumbing.kubernetes_basic_auth != nil
        return convert_kubernetes_basic_auth_to_porcelain(plumbing.kubernetes_basic_auth)
      end
      if plumbing.kubernetes_service_account != nil
        return convert_kubernetes_service_account_to_porcelain(plumbing.kubernetes_service_account)
      end
      if plumbing.kubernetes_service_account_user_impersonation != nil
        return convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing.kubernetes_service_account_user_impersonation)
      end
      if plumbing.kubernetes_user_impersonation != nil
        return convert_kubernetes_user_impersonation_to_porcelain(plumbing.kubernetes_user_impersonation)
      end
      if plumbing.maria != nil
        return convert_maria_to_porcelain(plumbing.maria)
      end
      if plumbing.memcached != nil
        return convert_memcached_to_porcelain(plumbing.memcached)
      end
      if plumbing.memsql != nil
        return convert_memsql_to_porcelain(plumbing.memsql)
      end
      if plumbing.mongo_host != nil
        return convert_mongo_host_to_porcelain(plumbing.mongo_host)
      end
      if plumbing.mongo_legacy_host != nil
        return convert_mongo_legacy_host_to_porcelain(plumbing.mongo_legacy_host)
      end
      if plumbing.mongo_legacy_replicaset != nil
        return convert_mongo_legacy_replicaset_to_porcelain(plumbing.mongo_legacy_replicaset)
      end
      if plumbing.mongo_replica_set != nil
        return convert_mongo_replica_set_to_porcelain(plumbing.mongo_replica_set)
      end
      if plumbing.mongo_sharded_cluster != nil
        return convert_mongo_sharded_cluster_to_porcelain(plumbing.mongo_sharded_cluster)
      end
      if plumbing.mtls_mysql != nil
        return convert_mtls_mysql_to_porcelain(plumbing.mtls_mysql)
      end
      if plumbing.mtls_postgres != nil
        return convert_mtls_postgres_to_porcelain(plumbing.mtls_postgres)
      end
      if plumbing.mysql != nil
        return convert_mysql_to_porcelain(plumbing.mysql)
      end
      if plumbing.neptune != nil
        return convert_neptune_to_porcelain(plumbing.neptune)
      end
      if plumbing.neptune_iam != nil
        return convert_neptune_iam_to_porcelain(plumbing.neptune_iam)
      end
      if plumbing.oracle != nil
        return convert_oracle_to_porcelain(plumbing.oracle)
      end
      if plumbing.postgres != nil
        return convert_postgres_to_porcelain(plumbing.postgres)
      end
      if plumbing.presto != nil
        return convert_presto_to_porcelain(plumbing.presto)
      end
      if plumbing.rabbit_mqamqp_091 != nil
        return convert_rabbit_mqamqp_091_to_porcelain(plumbing.rabbit_mqamqp_091)
      end
      if plumbing.raw_tcp != nil
        return convert_raw_tcp_to_porcelain(plumbing.raw_tcp)
      end
      if plumbing.rdp != nil
        return convert_rdp_to_porcelain(plumbing.rdp)
      end
      if plumbing.redis != nil
        return convert_redis_to_porcelain(plumbing.redis)
      end
      if plumbing.redshift != nil
        return convert_redshift_to_porcelain(plumbing.redshift)
      end
      if plumbing.single_store != nil
        return convert_single_store_to_porcelain(plumbing.single_store)
      end
      if plumbing.snowflake != nil
        return convert_snowflake_to_porcelain(plumbing.snowflake)
      end
      if plumbing.snowsight != nil
        return convert_snowsight_to_porcelain(plumbing.snowsight)
      end
      if plumbing.sql_server != nil
        return convert_sql_server_to_porcelain(plumbing.sql_server)
      end
      if plumbing.ssh != nil
        return convert_ssh_to_porcelain(plumbing.ssh)
      end
      if plumbing.ssh_cert != nil
        return convert_ssh_cert_to_porcelain(plumbing.ssh_cert)
      end
      if plumbing.ssh_customer_key != nil
        return convert_ssh_customer_key_to_porcelain(plumbing.ssh_customer_key)
      end
      if plumbing.sybase != nil
        return convert_sybase_to_porcelain(plumbing.sybase)
      end
      if plumbing.sybase_iq != nil
        return convert_sybase_iq_to_porcelain(plumbing.sybase_iq)
      end
      if plumbing.teradata != nil
        return convert_teradata_to_porcelain(plumbing.teradata)
      end
    end
    def self.convert_repeated_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_resource_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_resource_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Role.new()
      porcelain.access_rules = convert_access_rules_to_porcelain(plumbing.access_rules)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_role_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Role.new()
      plumbing.access_rules = convert_access_rules_to_plumbing(porcelain.access_rules)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_role_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_role_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_role_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sql_server_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SQLServer.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.schema = (plumbing.schema)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sql_server_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SQLServer.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.schema = (porcelain.schema)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sql_server_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sql_server_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sql_server_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sql_server_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSH.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.key_type = (plumbing.key_type)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.public_key = (plumbing.public_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSH.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.key_type = (porcelain.key_type)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.public_key = (porcelain.public_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_cert_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSHCert.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.key_type = (plumbing.key_type)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.remote_identity_healthcheck_username = (plumbing.remote_identity_healthcheck_username)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_cert_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSHCert.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.key_type = (porcelain.key_type)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.remote_identity_healthcheck_username = (porcelain.remote_identity_healthcheck_username)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_cert_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_cert_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_cert_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_cert_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_customer_key_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSHCustomerKey.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.private_key = (plumbing.private_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_customer_key_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSHCustomerKey.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.private_key = (porcelain.private_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_customer_key_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_customer_key_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_customer_key_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_customer_key_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStore.new()
      if porcelain.instance_of? AWSStore
        plumbing.aws = convert_aws_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzureStore
        plumbing.azure = convert_azure_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CyberarkConjurStore
        plumbing.cyberark_conjur = convert_cyberark_conjur_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CyberarkPAMExperimentalStore
        plumbing.cyberark_pam_experimental = convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DelineaStore
        plumbing.delinea = convert_delinea_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCPStore
        plumbing.gcp = convert_gcp_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAppRoleStore
        plumbing.vault_app_role = convert_vault_app_role_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTLSStore
        plumbing.vault_tls = convert_vault_tls_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTokenStore
        plumbing.vault_token = convert_vault_token_store_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_secret_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.aws != nil
        return convert_aws_store_to_porcelain(plumbing.aws)
      end
      if plumbing.azure != nil
        return convert_azure_store_to_porcelain(plumbing.azure)
      end
      if plumbing.cyberark_conjur != nil
        return convert_cyberark_conjur_store_to_porcelain(plumbing.cyberark_conjur)
      end
      if plumbing.cyberark_pam_experimental != nil
        return convert_cyberark_pam_experimental_store_to_porcelain(plumbing.cyberark_pam_experimental)
      end
      if plumbing.delinea != nil
        return convert_delinea_store_to_porcelain(plumbing.delinea)
      end
      if plumbing.gcp != nil
        return convert_gcp_store_to_porcelain(plumbing.gcp)
      end
      if plumbing.vault_app_role != nil
        return convert_vault_app_role_store_to_porcelain(plumbing.vault_app_role)
      end
      if plumbing.vault_tls != nil
        return convert_vault_tls_store_to_porcelain(plumbing.vault_tls)
      end
      if plumbing.vault_token != nil
        return convert_vault_token_store_to_porcelain(plumbing.vault_token)
      end
    end
    def self.convert_repeated_secret_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_store_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_store_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_service_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Service.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.suspended = (plumbing.suspended)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_service_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Service.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.suspended = (porcelain.suspended)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_service_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_service_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_service_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_service_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_single_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SingleStore.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_single_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SingleStore.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_single_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_single_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_single_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_single_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_snowflake_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Snowflake.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.schema = (plumbing.schema)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_snowflake_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Snowflake.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.schema = (porcelain.schema)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_snowflake_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_snowflake_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_snowflake_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_snowflake_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_snowsight_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Snowsight.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_username = (plumbing.healthcheck_username)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.samlmetadata = (plumbing.samlMetadata)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_snowsight_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Snowsight.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_username = (porcelain.healthcheck_username)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.samlMetadata = (porcelain.samlmetadata)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_snowsight_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_snowsight_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_snowsight_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_snowsight_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sybase_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Sybase.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sybase_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Sybase.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sybase_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sybase_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sybase_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sybase_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sybase_iq_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SybaseIQ.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sybase_iq_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SybaseIQ.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sybase_iq_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sybase_iq_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sybase_iq_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sybase_iq_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_tag_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Tag.new()
      porcelain.name = (plumbing.name)
      porcelain.value = (plumbing.value)
      porcelain
    end

    def self.convert_tag_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Tag.new()
      plumbing.name = (porcelain.name)
      plumbing.value = (porcelain.value)
      plumbing
    end
    def self.convert_repeated_tag_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_tag_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_tag_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_tag_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_teradata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Teradata.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_teradata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Teradata.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_teradata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_teradata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_teradata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_teradata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_update_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = UpdateResponseMetadata.new()
      porcelain
    end

    def self.convert_update_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::UpdateResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_update_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_update_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_update_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_update_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_user_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = User.new()
      porcelain.email = (plumbing.email)
      porcelain.first_name = (plumbing.first_name)
      porcelain.id = (plumbing.id)
      porcelain.last_name = (plumbing.last_name)
      porcelain.suspended = (plumbing.suspended)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_user_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::User.new()
      plumbing.email = (porcelain.email)
      plumbing.first_name = (porcelain.first_name)
      plumbing.id = (porcelain.id)
      plumbing.last_name = (porcelain.last_name)
      plumbing.suspended = (porcelain.suspended)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_user_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_user_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_user_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_user_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_app_role_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAppRoleStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_app_role_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAppRoleStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_app_role_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_app_role_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_app_role_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_app_role_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_tls_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTLSStore.new()
      porcelain.ca_cert_path = (plumbing.CA_cert_path)
      porcelain.client_cert_path = (plumbing.client_cert_path)
      porcelain.client_key_path = (plumbing.client_key_path)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_tls_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTLSStore.new()
      plumbing.CA_cert_path = (porcelain.ca_cert_path)
      plumbing.client_cert_path = (porcelain.client_cert_path)
      plumbing.client_key_path = (porcelain.client_key_path)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_tls_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_tls_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_tls_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_tls_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_token_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTokenStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_token_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTokenStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_token_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_token_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_token_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_token_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_error_to_porcelain(err)
      if not err.is_a? GRPC::BadStatus
        return RPCError.new(err, 2) # Unknown
      end

      if err.code == 4
        return DeadlineExceededError.new(err.message)
      end

      status = err.to_rpc_status
      if status == nil
        return RPCError.new(err.message, err.code)
      end
      case err.code
      when 3
        return BadRequestError.new(err.message)
      when 5
        return NotFoundError.new(err.message)
      when 6
        return AlreadyExistsError.new(err.message)
      when 7
        return PermissionError.new(err.message)
      when 8
        status.details.each do |detail|
          if detail.type_url == "type.googleapis.com/v1.RateLimitMetadata"
            rate_limit = detail.unpack V1::RateLimitMetadata
            return RateLimitError.new(err.message, convert_rate_limit_metadata_to_porcelain(rate_limit))
          end
        end
      when 13
        return InternalError.new(err.message)
      when 16
        return AuthenticationError.new(err.message)
      end
      return RPCError.new(err.message, err.code)
    end
  end
end
