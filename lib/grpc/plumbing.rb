# Copyright 2020 StrongDM Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# @internal Code generated by protogen. DO NOT EDIT.

require "grpc"
require "google/protobuf/well_known_types"
require "json"
require_relative "./options_pb"
require_relative "./spec_pb"
require_relative "./tags_pb"
require_relative "./access_requests_pb"
require_relative "./access_request_events_history_pb"
require_relative "./access_requests_history_pb"
require_relative "./drivers_pb"
require_relative "./account_attachments_pb"
require_relative "./account_attachments_history_pb"
require_relative "./account_grants_pb"
require_relative "./account_grants_history_pb"
require_relative "./account_permissions_pb"
require_relative "./account_resources_pb"
require_relative "./account_resources_history_pb"
require_relative "./accounts_pb"
require_relative "./accounts_history_pb"
require_relative "./activities_pb"
require_relative "./approval_workflow_approvers_pb"
require_relative "./approval_workflow_approvers_history_pb"
require_relative "./approval_workflow_steps_pb"
require_relative "./approval_workflow_steps_history_pb"
require_relative "./approval_workflows_pb"
require_relative "./approval_workflows_history_pb"
require_relative "./control_panel_pb"
require_relative "./health_checks_pb"
require_relative "./identity_aliases_pb"
require_relative "./identity_aliases_history_pb"
require_relative "./identity_sets_pb"
require_relative "./identity_sets_history_pb"
require_relative "./managed_secrets_pb"
require_relative "./nodes_pb"
require_relative "./nodes_history_pb"
require_relative "./organization_history_pb"
require_relative "./peering_group_nodes_pb"
require_relative "./peering_group_peers_pb"
require_relative "./peering_group_resources_pb"
require_relative "./peering_groups_pb"
require_relative "./policies_pb"
require_relative "./policies_history_pb"
require_relative "./proxy_cluster_keys_pb"
require_relative "./queries_pb"
require_relative "./remote_identities_pb"
require_relative "./remote_identities_history_pb"
require_relative "./remote_identity_groups_pb"
require_relative "./remote_identity_groups_history_pb"
require_relative "./replays_pb"
require_relative "./resources_pb"
require_relative "./resources_history_pb"
require_relative "./role_resources_pb"
require_relative "./role_resources_history_pb"
require_relative "./roles_pb"
require_relative "./roles_history_pb"
require_relative "./secret_engine_policy_pb"
require_relative "./secret_engine_types_pb"
require_relative "./secret_store_types_pb"
require_relative "./secret_stores_pb"
require_relative "./secret_engines_pb"
require_relative "./secret_store_healths_pb"
require_relative "./secret_stores_history_pb"
require_relative "./workflow_approvers_pb"
require_relative "./workflow_approvers_history_pb"
require_relative "./workflow_assignments_pb"
require_relative "./workflow_assignments_history_pb"
require_relative "./workflow_roles_pb"
require_relative "./workflow_roles_history_pb"
require_relative "./workflows_pb"
require_relative "./workflows_history_pb"
require_relative "../models/porcelain"
require_relative "../errors/errors"
require_relative "../constants"

module SDM
  module Plumbing
    def self.quote_filter_args(filter, *args)
      parts = (filter + " ").split("?")
      if parts.length() != args.length() + 1
        raise BadRequestError.new("incorrect number of replacements")
      end
      b = ""
      parts.each_with_index do |v, i|
        b += v
        if i < args.length()
          s = args[i].to_s()
          s = JSON.dump(s)
          b += s
        end
      end
      return b
    end

    def self.convert_timestamp_to_porcelain(t)
      if t == nil
        return nil
      end
      return Time.at(t.seconds + t.nanos * (10 ** -9))
    end

    def self.convert_timestamp_to_plumbing(t)
      if t == nil
        return nil
      end
      return Google::Protobuf::Timestamp.new(seconds: t.to_i, nanos: t.nsec)
    end

    def self.convert_duration_to_porcelain(d)
      if d == nil
        return nil
      end
      return d.to_f
    end

    def self.convert_duration_to_plumbing(d)
      if d == nil
        return nil
      end
      return Google::Protobuf::Duration.new(seconds: d.to_i, nanos: (d.modulo(1) * 10 ** 9).to_i)
    end

    def self.convert_tags_to_porcelain(t)
      if t == nil
        return nil
      end
      res = {}
      t.pairs.each do |pair|
        res[pair.name] = pair.value
      end
      res
    end

    def self.convert_tags_to_plumbing(t)
      if t == nil
        return nil
      end
      tags = V1::Tags.new()
      t.each do |key, value|
        pair = V1::Tags::Pair.new()
        pair.name = key
        pair.value = value
        tags.pairs.push(pair)
      end
      tags
    end

    def self.convert_access_rules_to_porcelain(access_rules_json)
      if access_rules_json == nil
        return nil
      end
      if access_rules_json == ""
        return nil
      end
      JSON.parse(access_rules_json)
    end

    def self.convert_access_rules_to_plumbing(access_rules)
      if access_rules == nil
        return nil
      end
      JSON.dump(access_rules)
    end

    def self.convert_access_rule_to_porcelain(access_rule_json)
      if access_rule_json == nil
        return nil
      end
      if access_rule_json == ""
        return nil
      end
      JSON.parse(access_rule_json)
    end

    def self.convert_access_rule_to_plumbing(access_rule)
      if access_rule == nil
        return nil
      end
      JSON.dump(access_rule)
    end
    def self.convert_aks_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKS.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aks_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKS.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aks_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aks_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aks_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_service_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSServiceAccount.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_aks_service_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSServiceAccount.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_aks_service_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_service_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_service_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_service_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_service_account_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSServiceAccountUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSServiceAccountUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_aks_service_account_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_service_account_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_service_account_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aks_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AKSUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aks_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AKSUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aks_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aks_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aks_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aks_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWS.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_region = (plumbing.healthcheck_region)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWS.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_region = (porcelain.healthcheck_region)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_cert_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSCertX509Store.new()
      porcelain.caarn = (plumbing.caArn)
      porcelain.certificatetemplatearn = (plumbing.certificateTemplateArn)
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.region = (plumbing.region)
      porcelain.signingalgo = (plumbing.signingAlgo)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_cert_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSCertX509Store.new()
      plumbing.caArn = (porcelain.caarn)
      plumbing.certificateTemplateArn = (porcelain.certificatetemplatearn)
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.region = (porcelain.region)
      plumbing.signingAlgo = (porcelain.signingalgo)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_cert_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_cert_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_cert_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_cert_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_console_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSConsole.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.enable_env_variables = (plumbing.enable_env_variables)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_console_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSConsole.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.enable_env_variables = (porcelain.enable_env_variables)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_console_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_console_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_console_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_console_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_console_static_key_pair_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSConsoleStaticKeyPair.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_console_static_key_pair_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSConsoleStaticKeyPair.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_console_static_key_pair_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_console_static_key_pair_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_console_static_key_pair_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_console_static_key_pair_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_instance_profile_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSInstanceProfile.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.enable_env_variables = (plumbing.enable_env_variables)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_instance_profile_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSInstanceProfile.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.enable_env_variables = (porcelain.enable_env_variables)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_instance_profile_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_instance_profile_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_instance_profile_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_instance_profile_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aws_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AWSStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.region = (plumbing.region)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_aws_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AWSStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.region = (porcelain.region)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_aws_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aws_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aws_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aws_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequest.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.duration = (plumbing.duration)
      porcelain.grant_id = (plumbing.grant_id)
      porcelain.id = (plumbing.id)
      porcelain.reason = (plumbing.reason)
      porcelain.requestedduration = convert_duration_to_porcelain(plumbing.requestedDuration)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.resultduration = convert_duration_to_porcelain(plumbing.resultDuration)
      porcelain.start_from = convert_timestamp_to_porcelain(plumbing.start_from)
      porcelain.status = (plumbing.status)
      porcelain.status_at = convert_timestamp_to_porcelain(plumbing.status_at)
      porcelain.valid_until = convert_timestamp_to_porcelain(plumbing.valid_until)
      porcelain.workflow_id = (plumbing.workflow_id)
      porcelain
    end

    def self.convert_access_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequest.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.duration = (porcelain.duration)
      plumbing.grant_id = (porcelain.grant_id)
      plumbing.id = (porcelain.id)
      plumbing.reason = (porcelain.reason)
      plumbing.requestedDuration = convert_duration_to_plumbing(porcelain.requestedduration)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.resultDuration = convert_duration_to_plumbing(porcelain.resultduration)
      plumbing.start_from = convert_timestamp_to_plumbing(porcelain.start_from)
      plumbing.status = (porcelain.status)
      plumbing.status_at = convert_timestamp_to_plumbing(porcelain.status_at)
      plumbing.valid_until = convert_timestamp_to_plumbing(porcelain.valid_until)
      plumbing.workflow_id = (porcelain.workflow_id)
      plumbing
    end
    def self.convert_repeated_access_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_config_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestConfig.new()
      porcelain.duration = (plumbing.duration)
      porcelain.reason = (plumbing.reason)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.start_from = convert_timestamp_to_porcelain(plumbing.start_from)
      porcelain
    end

    def self.convert_access_request_config_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestConfig.new()
      plumbing.duration = (porcelain.duration)
      plumbing.reason = (porcelain.reason)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.start_from = convert_timestamp_to_plumbing(porcelain.start_from)
      plumbing
    end
    def self.convert_repeated_access_request_config_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_config_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_config_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_config_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_event_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestEvent.new()
      porcelain.actor_id = (plumbing.actor_id)
      porcelain.id = (plumbing.id)
      porcelain.metadata = (plumbing.metadata)
      porcelain.request_id = (plumbing.request_id)
      porcelain.type = (plumbing.type)
      porcelain
    end

    def self.convert_access_request_event_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestEvent.new()
      plumbing.actor_id = (porcelain.actor_id)
      plumbing.id = (porcelain.id)
      plumbing.metadata = (porcelain.metadata)
      plumbing.request_id = (porcelain.request_id)
      plumbing.type = (porcelain.type)
      plumbing
    end
    def self.convert_repeated_access_request_event_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_event_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_event_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_event_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_event_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestEventHistory.new()
      porcelain.access_request_event = convert_access_request_event_to_porcelain(plumbing.access_request_event)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_access_request_event_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestEventHistory.new()
      plumbing.access_request_event = convert_access_request_event_to_plumbing(porcelain.access_request_event)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_access_request_event_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_event_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_event_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_event_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestHistory.new()
      porcelain.access_request = convert_access_request_to_porcelain(plumbing.access_request)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_access_request_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestHistory.new()
      plumbing.access_request = convert_access_request_to_plumbing(porcelain.access_request)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_access_request_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_access_request_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_access_request_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_access_request_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccessRequestListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_access_request_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccessRequestListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_access_request_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_access_request_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_access_request_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_access_request_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Account.new()
      if porcelain.instance_of? Service
        plumbing.service = convert_service_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Token
        plumbing.token = convert_token_to_plumbing(porcelain)
      end
      if porcelain.instance_of? User
        plumbing.user = convert_user_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.service != nil
        return convert_service_to_porcelain(plumbing.service)
      end
      if plumbing.token != nil
        return convert_token_to_porcelain(plumbing.token)
      end
      if plumbing.user != nil
        return convert_user_to_porcelain(plumbing.user)
      end
      raise UnknownError.new("unknown polymorphic type, please upgrade your SDK")
    end
    def self.convert_repeated_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachment.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_account_attachment_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachment.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_account_attachment_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentCreateResponse.new()
      porcelain.account_attachment = convert_account_attachment_to_porcelain(plumbing.account_attachment)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentCreateResponse.new()
      plumbing.account_attachment = convert_account_attachment_to_plumbing(porcelain.account_attachment)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentGetResponse.new()
      porcelain.account_attachment = convert_account_attachment_to_porcelain(plumbing.account_attachment)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_attachment_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentGetResponse.new()
      plumbing.account_attachment = convert_account_attachment_to_plumbing(porcelain.account_attachment)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_attachment_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_attachment_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountAttachmentHistory.new()
      porcelain.account_attachment = convert_account_attachment_to_porcelain(plumbing.account_attachment)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_account_attachment_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountAttachmentHistory.new()
      plumbing.account_attachment = convert_account_attachment_to_plumbing(porcelain.account_attachment)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_account_attachment_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_attachment_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_attachment_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_attachment_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountCreateResponse.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_key = (plumbing.secret_key)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_account_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountCreateResponse.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_key = (porcelain.secret_key)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_account_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGetResponse.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGetResponse.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrant.new()
      porcelain.access_rule = convert_access_rule_to_porcelain(plumbing.access_rule)
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.start_from = convert_timestamp_to_porcelain(plumbing.start_from)
      porcelain.valid_until = convert_timestamp_to_porcelain(plumbing.valid_until)
      porcelain
    end

    def self.convert_account_grant_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrant.new()
      plumbing.access_rule = convert_access_rule_to_plumbing(porcelain.access_rule)
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.start_from = convert_timestamp_to_plumbing(porcelain.start_from)
      plumbing.valid_until = convert_timestamp_to_plumbing(porcelain.valid_until)
      plumbing
    end
    def self.convert_repeated_account_grant_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantCreateResponse.new()
      porcelain.account_grant = convert_account_grant_to_porcelain(plumbing.account_grant)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantCreateResponse.new()
      plumbing.account_grant = convert_account_grant_to_plumbing(porcelain.account_grant)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantGetResponse.new()
      porcelain.account_grant = convert_account_grant_to_porcelain(plumbing.account_grant)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_grant_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantGetResponse.new()
      plumbing.account_grant = convert_account_grant_to_plumbing(porcelain.account_grant)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_grant_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_grant_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountGrantHistory.new()
      porcelain.account_grant = convert_account_grant_to_porcelain(plumbing.account_grant)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_account_grant_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountGrantHistory.new()
      plumbing.account_grant = convert_account_grant_to_plumbing(porcelain.account_grant)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_account_grant_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_grant_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_grant_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_grant_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountHistory.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_account_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountHistory.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_account_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_permission_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountPermission.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.granted_at = convert_timestamp_to_porcelain(plumbing.granted_at)
      porcelain.permission = (plumbing.permission)
      porcelain.scope = (plumbing.scope)
      porcelain.scoped_id = (plumbing.scoped_id)
      porcelain
    end

    def self.convert_account_permission_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountPermission.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.granted_at = convert_timestamp_to_plumbing(porcelain.granted_at)
      plumbing.permission = (porcelain.permission)
      plumbing.scope = (porcelain.scope)
      plumbing.scoped_id = (porcelain.scoped_id)
      plumbing
    end
    def self.convert_repeated_account_permission_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_permission_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_permission_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_permission_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountResource.new()
      porcelain.account_grant_id = (plumbing.account_grant_id)
      porcelain.account_id = (plumbing.account_id)
      porcelain.created_at = convert_timestamp_to_porcelain(plumbing.created_at)
      porcelain.expires_at = convert_timestamp_to_porcelain(plumbing.expires_at)
      porcelain.granted_at = convert_timestamp_to_porcelain(plumbing.granted_at)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_account_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountResource.new()
      plumbing.account_grant_id = (porcelain.account_grant_id)
      plumbing.account_id = (porcelain.account_id)
      plumbing.created_at = convert_timestamp_to_plumbing(porcelain.created_at)
      plumbing.expires_at = convert_timestamp_to_plumbing(porcelain.expires_at)
      plumbing.granted_at = convert_timestamp_to_plumbing(porcelain.granted_at)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_account_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_resource_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountResourceHistory.new()
      porcelain.account_resource = convert_account_resource_to_porcelain(plumbing.account_resource)
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_account_resource_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountResourceHistory.new()
      plumbing.account_resource = convert_account_resource_to_plumbing(porcelain.account_resource)
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_account_resource_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_resource_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_resource_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_resource_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_account_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AccountUpdateResponse.new()
      porcelain.account = convert_account_to_porcelain(plumbing.account)
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_account_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AccountUpdateResponse.new()
      plumbing.account = convert_account_to_plumbing(porcelain.account)
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_account_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_account_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_account_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_account_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_active_directory_engine_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ActiveDirectoryEngine.new()
      porcelain.after_read_ttl = convert_duration_to_porcelain(plumbing.after_read_ttl)
      porcelain.binddn = (plumbing.binddn)
      porcelain.bindpass = (plumbing.bindpass)
      porcelain.certificate = (plumbing.certificate)
      porcelain.connection_timeout = (plumbing.connection_timeout)
      porcelain.do_not_validate_timestamps = (plumbing.do_not_validate_timestamps)
      porcelain.id = (plumbing.id)
      porcelain.insecure_tls = (plumbing.insecure_tls)
      porcelain.key_rotation_interval_days = (plumbing.key_rotation_interval_days)
      porcelain.max_backoff_duration = convert_duration_to_porcelain(plumbing.max_backoff_duration)
      porcelain.name = (plumbing.name)
      porcelain.policy = convert_secret_engine_policy_to_porcelain(plumbing.policy)
      porcelain.public_key = (plumbing.public_key)
      porcelain.request_timeout = (plumbing.request_timeout)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.secret_store_root_path = (plumbing.secret_store_root_path)
      porcelain.start_tls = (plumbing.start_tls)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.ttl = convert_duration_to_porcelain(plumbing.ttl)
      porcelain.upndomain = (plumbing.upndomain)
      porcelain.url = (plumbing.url)
      porcelain.userdn = (plumbing.userdn)
      porcelain
    end

    def self.convert_active_directory_engine_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ActiveDirectoryEngine.new()
      plumbing.after_read_ttl = convert_duration_to_plumbing(porcelain.after_read_ttl)
      plumbing.binddn = (porcelain.binddn)
      plumbing.bindpass = (porcelain.bindpass)
      plumbing.certificate = (porcelain.certificate)
      plumbing.connection_timeout = (porcelain.connection_timeout)
      plumbing.do_not_validate_timestamps = (porcelain.do_not_validate_timestamps)
      plumbing.id = (porcelain.id)
      plumbing.insecure_tls = (porcelain.insecure_tls)
      plumbing.key_rotation_interval_days = (porcelain.key_rotation_interval_days)
      plumbing.max_backoff_duration = convert_duration_to_plumbing(porcelain.max_backoff_duration)
      plumbing.name = (porcelain.name)
      plumbing.policy = convert_secret_engine_policy_to_plumbing(porcelain.policy)
      plumbing.public_key = (porcelain.public_key)
      plumbing.request_timeout = (porcelain.request_timeout)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.secret_store_root_path = (porcelain.secret_store_root_path)
      plumbing.start_tls = (porcelain.start_tls)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.ttl = convert_duration_to_plumbing(porcelain.ttl)
      plumbing.upndomain = (porcelain.upndomain)
      plumbing.url = (porcelain.url)
      plumbing.userdn = (porcelain.userdn)
      plumbing
    end
    def self.convert_repeated_active_directory_engine_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_active_directory_engine_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_active_directory_engine_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_active_directory_engine_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_active_directory_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ActiveDirectoryStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_active_directory_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ActiveDirectoryStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_active_directory_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_active_directory_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_active_directory_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_active_directory_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_activity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Activity.new()
      porcelain.actor = convert_activity_actor_to_porcelain(plumbing.actor)
      porcelain.completed_at = convert_timestamp_to_porcelain(plumbing.completed_at)
      porcelain.description = (plumbing.description)
      porcelain.entities = convert_repeated_activity_entity_to_porcelain(plumbing.entities)
      porcelain.id = (plumbing.id)
      porcelain.ip_address = (plumbing.ip_address)
      porcelain.user_agent = (plumbing.user_agent)
      porcelain.verb = (plumbing.verb)
      porcelain
    end

    def self.convert_activity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Activity.new()
      plumbing.actor = convert_activity_actor_to_plumbing(porcelain.actor)
      plumbing.completed_at = convert_timestamp_to_plumbing(porcelain.completed_at)
      plumbing.description = (porcelain.description)
      plumbing.entities += convert_repeated_activity_entity_to_plumbing(porcelain.entities)
      plumbing.id = (porcelain.id)
      plumbing.ip_address = (porcelain.ip_address)
      plumbing.user_agent = (porcelain.user_agent)
      plumbing.verb = (porcelain.verb)
      plumbing
    end
    def self.convert_repeated_activity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_activity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_activity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_activity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_activity_actor_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ActivityActor.new()
      porcelain.activity_external_id = (plumbing.activity_external_id)
      porcelain.email = (plumbing.email)
      porcelain.first_name = (plumbing.first_name)
      porcelain.id = (plumbing.id)
      porcelain.last_name = (plumbing.last_name)
      porcelain
    end

    def self.convert_activity_actor_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ActivityActor.new()
      plumbing.activity_external_id = (porcelain.activity_external_id)
      plumbing.email = (porcelain.email)
      plumbing.first_name = (porcelain.first_name)
      plumbing.id = (porcelain.id)
      plumbing.last_name = (porcelain.last_name)
      plumbing
    end
    def self.convert_repeated_activity_actor_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_activity_actor_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_activity_actor_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_activity_actor_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_activity_entity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ActivityEntity.new()
      porcelain.email = (plumbing.email)
      porcelain.external_id = (plumbing.external_id)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.type = (plumbing.type)
      porcelain
    end

    def self.convert_activity_entity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ActivityEntity.new()
      plumbing.email = (porcelain.email)
      plumbing.external_id = (porcelain.external_id)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.type = (porcelain.type)
      plumbing
    end
    def self.convert_repeated_activity_entity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_activity_entity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_activity_entity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_activity_entity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_activity_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ActivityGetResponse.new()
      porcelain.activity = convert_activity_to_porcelain(plumbing.activity)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_activity_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ActivityGetResponse.new()
      plumbing.activity = convert_activity_to_plumbing(porcelain.activity)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_activity_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_activity_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_activity_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_activity_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aerospike_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Aerospike.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_services_alternate = (plumbing.use_services_alternate)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aerospike_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Aerospike.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_services_alternate = (porcelain.use_services_alternate)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aerospike_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aerospike_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aerospike_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aerospike_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKS.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKS.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_instance_profile_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKSInstanceProfile.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_instance_profile_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKSInstanceProfile.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_instance_profile_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_instance_profile_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_instance_profile_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_instance_profile_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_instance_profile_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKSInstanceProfileUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_instance_profile_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKSInstanceProfileUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_instance_profile_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_instance_profile_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_instance_profile_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_instance_profile_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_eks_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonEKSUserImpersonation.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.cluster_name = (plumbing.cluster_name)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonEKSUserImpersonation.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.cluster_name = (porcelain.cluster_name)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_eks_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_eks_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_eks_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_es_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonES.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_amazon_es_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonES.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_amazon_es_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_es_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_es_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_es_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_esiam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonESIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tlsrequired = (plumbing.tlsRequired)
      porcelain
    end

    def self.convert_amazon_esiam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonESIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tlsRequired = (porcelain.tlsrequired)
      plumbing
    end
    def self.convert_repeated_amazon_esiam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_esiam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_esiam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_esiam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_amazon_mqamqp_091_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AmazonMQAMQP091.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_amazon_mqamqp_091_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AmazonMQAMQP091.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_amazon_mqamqp_091_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_amazon_mqamqp_091_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_amazon_mqamqp_091_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_amazon_mqamqp_091_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_flow_approver_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalFlowApprover.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.reference = (plumbing.reference)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_approval_flow_approver_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalFlowApprover.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.reference = (porcelain.reference)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_approval_flow_approver_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_flow_approver_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_flow_approver_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_flow_approver_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_flow_step_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalFlowStep.new()
      porcelain.approvers = convert_repeated_approval_flow_approver_to_porcelain(plumbing.approvers)
      porcelain.quantifier = (plumbing.quantifier)
      porcelain.skip_after = convert_duration_to_porcelain(plumbing.skip_after)
      porcelain
    end

    def self.convert_approval_flow_step_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalFlowStep.new()
      plumbing.approvers += convert_repeated_approval_flow_approver_to_plumbing(porcelain.approvers)
      plumbing.quantifier = (porcelain.quantifier)
      plumbing.skip_after = convert_duration_to_plumbing(porcelain.skip_after)
      plumbing
    end
    def self.convert_repeated_approval_flow_step_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_flow_step_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_flow_step_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_flow_step_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflow.new()
      porcelain.approval_mode = (plumbing.approval_mode)
      porcelain.approval_workflow_steps = convert_repeated_approval_flow_step_to_porcelain(plumbing.approval_workflow_steps)
      porcelain.description = (plumbing.description)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain
    end

    def self.convert_approval_workflow_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflow.new()
      plumbing.approval_mode = (porcelain.approval_mode)
      plumbing.approval_workflow_steps += convert_repeated_approval_flow_step_to_plumbing(porcelain.approval_workflow_steps)
      plumbing.description = (porcelain.description)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing
    end
    def self.convert_repeated_approval_workflow_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApprover.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.approval_flow_id = (plumbing.approval_flow_id)
      porcelain.approval_step_id = (plumbing.approval_step_id)
      porcelain.id = (plumbing.id)
      porcelain.reference = (plumbing.reference)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_approval_workflow_approver_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApprover.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.approval_flow_id = (porcelain.approval_flow_id)
      plumbing.approval_step_id = (porcelain.approval_step_id)
      plumbing.id = (porcelain.id)
      plumbing.reference = (porcelain.reference)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApproverCreateResponse.new()
      porcelain.approval_workflow_approver = convert_approval_workflow_approver_to_porcelain(plumbing.approval_workflow_approver)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_approver_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApproverCreateResponse.new()
      plumbing.approval_workflow_approver = convert_approval_workflow_approver_to_plumbing(porcelain.approval_workflow_approver)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApproverDeleteResponse.new()
      porcelain.id = (plumbing.id)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_approver_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApproverDeleteResponse.new()
      plumbing.id = (porcelain.id)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApproverGetResponse.new()
      porcelain.approval_workflow_approver = convert_approval_workflow_approver_to_porcelain(plumbing.approval_workflow_approver)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_approver_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApproverGetResponse.new()
      plumbing.approval_workflow_approver = convert_approval_workflow_approver_to_plumbing(porcelain.approval_workflow_approver)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApproverHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.approval_workflow_approver = convert_approval_workflow_approver_to_porcelain(plumbing.approval_workflow_approver)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_approval_workflow_approver_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApproverHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.approval_workflow_approver = convert_approval_workflow_approver_to_plumbing(porcelain.approval_workflow_approver)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_approver_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowApproverListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_approver_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowApproverListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_approver_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_approver_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_approver_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_approver_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowCreateResponse.new()
      porcelain.approval_workflow = convert_approval_workflow_to_porcelain(plumbing.approval_workflow)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowCreateResponse.new()
      plumbing.approval_workflow = convert_approval_workflow_to_plumbing(porcelain.approval_workflow)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowDeleteResponse.new()
      porcelain.id = (plumbing.id)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowDeleteResponse.new()
      plumbing.id = (porcelain.id)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowGetResponse.new()
      porcelain.approval_workflow = convert_approval_workflow_to_porcelain(plumbing.approval_workflow)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowGetResponse.new()
      plumbing.approval_workflow = convert_approval_workflow_to_plumbing(porcelain.approval_workflow)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.approval_workflow = convert_approval_workflow_to_porcelain(plumbing.approval_workflow)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_approval_workflow_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.approval_workflow = convert_approval_workflow_to_plumbing(porcelain.approval_workflow)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_approval_workflow_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStep.new()
      porcelain.approval_flow_id = (plumbing.approval_flow_id)
      porcelain.id = (plumbing.id)
      porcelain.quantifier = (plumbing.quantifier)
      porcelain.skip_after = convert_duration_to_porcelain(plumbing.skip_after)
      porcelain.step_order = (plumbing.step_order)
      porcelain
    end

    def self.convert_approval_workflow_step_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStep.new()
      plumbing.approval_flow_id = (porcelain.approval_flow_id)
      plumbing.id = (porcelain.id)
      plumbing.quantifier = (porcelain.quantifier)
      plumbing.skip_after = convert_duration_to_plumbing(porcelain.skip_after)
      plumbing.step_order = (porcelain.step_order)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStepCreateResponse.new()
      porcelain.approval_workflow_step = convert_approval_workflow_step_to_porcelain(plumbing.approval_workflow_step)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_step_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStepCreateResponse.new()
      plumbing.approval_workflow_step = convert_approval_workflow_step_to_plumbing(porcelain.approval_workflow_step)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStepDeleteResponse.new()
      porcelain.id = (plumbing.id)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_step_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStepDeleteResponse.new()
      plumbing.id = (porcelain.id)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStepGetResponse.new()
      porcelain.approval_workflow_step = convert_approval_workflow_step_to_porcelain(plumbing.approval_workflow_step)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_step_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStepGetResponse.new()
      plumbing.approval_workflow_step = convert_approval_workflow_step_to_plumbing(porcelain.approval_workflow_step)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStepHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.approval_workflow_step = convert_approval_workflow_step_to_porcelain(plumbing.approval_workflow_step)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_approval_workflow_step_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStepHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.approval_workflow_step = convert_approval_workflow_step_to_plumbing(porcelain.approval_workflow_step)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_step_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowStepListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_step_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowStepListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_step_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_step_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_step_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_step_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_approval_workflow_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ApprovalWorkflowUpdateResponse.new()
      porcelain.approval_workflow = convert_approval_workflow_to_porcelain(plumbing.approval_workflow)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_approval_workflow_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ApprovalWorkflowUpdateResponse.new()
      plumbing.approval_workflow = convert_approval_workflow_to_plumbing(porcelain.approval_workflow)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_approval_workflow_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_approval_workflow_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_approval_workflow_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_approval_workflow_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_athena_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Athena.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.output = (plumbing.output)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_athena_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Athena.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.output = (porcelain.output)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_athena_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_athena_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_athena_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_athena_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_athena_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AthenaIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.output = (plumbing.output)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_athena_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AthenaIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.output = (porcelain.output)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_athena_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_athena_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_athena_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_athena_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraMysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraMysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_mysql_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraMysqlIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_assumption_arn = (plumbing.role_assumption_arn)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_mysql_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraMysqlIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_assumption_arn = (porcelain.role_assumption_arn)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_mysql_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_mysql_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_mysql_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_mysql_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraPostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraPostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_aurora_postgres_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AuroraPostgresIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_assumption_arn = (plumbing.role_assumption_arn)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_aurora_postgres_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AuroraPostgresIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_assumption_arn = (porcelain.role_assumption_arn)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_aurora_postgres_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_aurora_postgres_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_aurora_postgres_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_aurora_postgres_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Azure.new()
      porcelain.app_id = (plumbing.app_id)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_id = (plumbing.tenant_id)
      porcelain
    end

    def self.convert_azure_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Azure.new()
      plumbing.app_id = (porcelain.app_id)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_id = (porcelain.tenant_id)
      plumbing
    end
    def self.convert_repeated_azure_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_certificate_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzureCertificate.new()
      porcelain.app_id = (plumbing.app_id)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_id = (plumbing.tenant_id)
      porcelain
    end

    def self.convert_azure_certificate_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzureCertificate.new()
      plumbing.app_id = (porcelain.app_id)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_id = (porcelain.tenant_id)
      plumbing
    end
    def self.convert_repeated_azure_certificate_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_certificate_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_certificate_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_certificate_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzureMysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_azure_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzureMysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_azure_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzurePostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_azure_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzurePostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_azure_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_postgres_managed_identity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzurePostgresManagedIdentity.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_azure_postgres_managed_identity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzurePostgresManagedIdentity.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_azure_postgres_managed_identity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_postgres_managed_identity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_postgres_managed_identity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_postgres_managed_identity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_azure_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = AzureStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.vault_uri = (plumbing.vault_uri)
      porcelain
    end

    def self.convert_azure_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::AzureStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.vault_uri = (porcelain.vault_uri)
      plumbing
    end
    def self.convert_repeated_azure_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_azure_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_azure_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_azure_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_big_query_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = BigQuery.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.private_key = (plumbing.private_key)
      porcelain.project = (plumbing.project)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_big_query_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::BigQuery.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.private_key = (porcelain.private_key)
      plumbing.project = (porcelain.project)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_big_query_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_big_query_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_big_query_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_big_query_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cassandra_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Cassandra.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_cassandra_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Cassandra.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_cassandra_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cassandra_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cassandra_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cassandra_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_citus_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Citus.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_citus_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Citus.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_citus_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_citus_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_citus_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_citus_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_click_house_http_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ClickHouseHTTP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_click_house_http_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ClickHouseHTTP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_click_house_http_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_click_house_http_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_click_house_http_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_click_house_http_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_click_house_my_sql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ClickHouseMySQL.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_click_house_my_sql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ClickHouseMySQL.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_click_house_my_sql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_click_house_my_sql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_click_house_my_sql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_click_house_my_sql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_click_house_tcp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ClickHouseTCP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_click_house_tcp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ClickHouseTCP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_click_house_tcp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_click_house_tcp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_click_house_tcp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_click_house_tcp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_clustrix_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Clustrix.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_clustrix_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Clustrix.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_clustrix_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_clustrix_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_clustrix_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_clustrix_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cockroach_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Cockroach.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_cockroach_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Cockroach.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_cockroach_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cockroach_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cockroach_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cockroach_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_control_panel_get_rdpca_public_key_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ControlPanelGetRDPCAPublicKeyResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.public_key = (plumbing.public_key)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_control_panel_get_rdpca_public_key_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ControlPanelGetRDPCAPublicKeyResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.public_key = (porcelain.public_key)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_control_panel_get_rdpca_public_key_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_control_panel_get_rdpca_public_key_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_control_panel_get_rdpca_public_key_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_control_panel_get_rdpca_public_key_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_control_panel_get_sshca_public_key_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ControlPanelGetSSHCAPublicKeyResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.public_key = (plumbing.public_key)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_control_panel_get_sshca_public_key_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ControlPanelGetSSHCAPublicKeyResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.public_key = (porcelain.public_key)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_control_panel_get_sshca_public_key_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_control_panel_get_sshca_public_key_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_control_panel_get_sshca_public_key_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_control_panel_get_sshca_public_key_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_control_panel_verify_jwt_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ControlPanelVerifyJWTResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.valid = (plumbing.valid)
      porcelain
    end

    def self.convert_control_panel_verify_jwt_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ControlPanelVerifyJWTResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.valid = (porcelain.valid)
      plumbing
    end
    def self.convert_repeated_control_panel_verify_jwt_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_control_panel_verify_jwt_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_control_panel_verify_jwt_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_control_panel_verify_jwt_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_couchbase_database_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CouchbaseDatabase.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.n1ql_port = (plumbing.n1ql_port)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_couchbase_database_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CouchbaseDatabase.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.n1ql_port = (porcelain.n1ql_port)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_couchbase_database_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_couchbase_database_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_couchbase_database_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_couchbase_database_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_couchbase_web_ui_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CouchbaseWebUI.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_couchbase_web_ui_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CouchbaseWebUI.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_couchbase_web_ui_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_couchbase_web_ui_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_couchbase_web_ui_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_couchbase_web_ui_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_create_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CreateResponseMetadata.new()
      porcelain
    end

    def self.convert_create_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CreateResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_create_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_create_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_create_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_create_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cyberark_conjur_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CyberarkConjurStore.new()
      porcelain.appurl = (plumbing.appURL)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_cyberark_conjur_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CyberarkConjurStore.new()
      plumbing.appURL = (porcelain.appurl)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_cyberark_conjur_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cyberark_conjur_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cyberark_conjur_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cyberark_conjur_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cyberark_pam_experimental_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CyberarkPAMExperimentalStore.new()
      porcelain.appurl = (plumbing.appURL)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CyberarkPAMExperimentalStore.new()
      plumbing.appURL = (porcelain.appurl)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_cyberark_pam_experimental_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cyberark_pam_experimental_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cyberark_pam_experimental_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_cyberark_pam_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = CyberarkPAMStore.new()
      porcelain.appurl = (plumbing.appURL)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_cyberark_pam_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::CyberarkPAMStore.new()
      plumbing.appURL = (porcelain.appurl)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_cyberark_pam_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_cyberark_pam_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_cyberark_pam_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_cyberark_pam_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_db_2_i_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DB2I.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_db_2_i_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DB2I.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_db_2_i_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_db_2_i_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_db_2_i_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_db_2_i_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_db_2_luw_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DB2LUW.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_db_2_luw_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DB2LUW.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_db_2_luw_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_db_2_luw_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_db_2_luw_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_db_2_luw_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_delete_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DeleteResponseMetadata.new()
      porcelain
    end

    def self.convert_delete_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DeleteResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_delete_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_delete_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_delete_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_delete_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_delinea_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DelineaStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.server_url = (plumbing.server_url)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_name = (plumbing.tenant_name)
      porcelain
    end

    def self.convert_delinea_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DelineaStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.server_url = (porcelain.server_url)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_name = (porcelain.tenant_name)
      plumbing
    end
    def self.convert_repeated_delinea_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_delinea_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_delinea_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_delinea_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_document_db_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_document_db_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_host_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBHostIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_document_db_host_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBHostIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_document_db_host_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_host_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_host_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_host_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_replica_set_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBReplicaSet.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_document_db_replica_set_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBReplicaSet.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_document_db_replica_set_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_replica_set_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_replica_set_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_replica_set_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_document_db_replica_set_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DocumentDBReplicaSetIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_document_db_replica_set_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DocumentDBReplicaSetIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_document_db_replica_set_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_document_db_replica_set_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_document_db_replica_set_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_document_db_replica_set_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_druid_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Druid.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_druid_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Druid.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_druid_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_druid_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_druid_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_druid_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_dynamo_db_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DynamoDB.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_dynamo_db_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DynamoDB.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_dynamo_db_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_dynamo_db_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_dynamo_db_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_dynamo_db_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_dynamo_dbiam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = DynamoDBIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_dynamo_dbiam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::DynamoDBIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_dynamo_dbiam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_dynamo_dbiam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_dynamo_dbiam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_dynamo_dbiam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_elastic_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Elastic.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_elastic_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Elastic.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_elastic_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_elastic_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_elastic_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_elastic_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_elasticache_redis_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ElasticacheRedis.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_elasticache_redis_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ElasticacheRedis.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_elasticache_redis_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_elasticache_redis_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_elasticache_redis_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_elasticache_redis_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.keyfile = (plumbing.keyfile)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.scopes = (plumbing.scopes)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gcp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.keyfile = (porcelain.keyfile)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.scopes = (porcelain.scopes)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gcp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_cert_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCPCertX509Store.new()
      porcelain.caid = (plumbing.caID)
      porcelain.capoolid = (plumbing.caPoolID)
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.location = (plumbing.location)
      porcelain.name = (plumbing.name)
      porcelain.projectid = (plumbing.projectID)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gcp_cert_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCPCertX509Store.new()
      plumbing.caID = (porcelain.caid)
      plumbing.caPoolID = (porcelain.capoolid)
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.location = (porcelain.location)
      plumbing.name = (porcelain.name)
      plumbing.projectID = (porcelain.projectid)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gcp_cert_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_cert_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_cert_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_cert_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_console_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCPConsole.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.workforce_pool_id = (plumbing.workforce_pool_id)
      porcelain.workforce_provider_id = (plumbing.workforce_provider_id)
      porcelain
    end

    def self.convert_gcp_console_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCPConsole.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.workforce_pool_id = (porcelain.workforce_pool_id)
      plumbing.workforce_provider_id = (porcelain.workforce_provider_id)
      plumbing
    end
    def self.convert_repeated_gcp_console_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_console_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_console_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_console_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcp_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCPStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.projectid = (plumbing.projectID)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_gcp_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCPStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.projectID = (porcelain.projectid)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_gcp_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcp_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcp_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcp_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gcpwif_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GCPWIF.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.project_id = (plumbing.project_id)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.scopes = (plumbing.scopes)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.session_expiry = (plumbing.session_expiry)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.workforce_pool_id = (plumbing.workforce_pool_id)
      porcelain.workforce_provider_id = (plumbing.workforce_provider_id)
      porcelain
    end

    def self.convert_gcpwif_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GCPWIF.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.project_id = (porcelain.project_id)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.scopes = (porcelain.scopes)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.session_expiry = (porcelain.session_expiry)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.workforce_pool_id = (porcelain.workforce_pool_id)
      plumbing.workforce_provider_id = (porcelain.workforce_provider_id)
      plumbing
    end
    def self.convert_repeated_gcpwif_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gcpwif_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gcpwif_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gcpwif_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_gateway_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Gateway.new()
      porcelain.bind_address = (plumbing.bind_address)
      porcelain.device = (plumbing.device)
      porcelain.gateway_filter = (plumbing.gateway_filter)
      porcelain.id = (plumbing.id)
      porcelain.listen_address = (plumbing.listen_address)
      porcelain.location = (plumbing.location)
      porcelain.maintenance_windows = convert_repeated_node_maintenance_window_to_porcelain(plumbing.maintenance_windows)
      porcelain.name = (plumbing.name)
      porcelain.state = (plumbing.state)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.version = (plumbing.version)
      porcelain
    end

    def self.convert_gateway_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Gateway.new()
      plumbing.bind_address = (porcelain.bind_address)
      plumbing.device = (porcelain.device)
      plumbing.gateway_filter = (porcelain.gateway_filter)
      plumbing.id = (porcelain.id)
      plumbing.listen_address = (porcelain.listen_address)
      plumbing.location = (porcelain.location)
      plumbing.maintenance_windows += convert_repeated_node_maintenance_window_to_plumbing(porcelain.maintenance_windows)
      plumbing.name = (porcelain.name)
      plumbing.state = (porcelain.state)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.version = (porcelain.version)
      plumbing
    end
    def self.convert_repeated_gateway_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_gateway_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_gateway_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_gateway_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_generate_keys_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GenerateKeysRequest.new()
      porcelain.secret_engine_id = (plumbing.secret_engine_id)
      porcelain
    end

    def self.convert_generate_keys_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GenerateKeysRequest.new()
      plumbing.secret_engine_id = (porcelain.secret_engine_id)
      plumbing
    end
    def self.convert_repeated_generate_keys_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_generate_keys_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_generate_keys_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_generate_keys_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_generate_keys_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GenerateKeysResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_generate_keys_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GenerateKeysResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_generate_keys_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_generate_keys_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_generate_keys_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_generate_keys_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_generic_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GenericResponseMetadata.new()
      porcelain
    end

    def self.convert_generic_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GenericResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_generic_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_generic_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_generic_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_generic_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_get_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GetResponseMetadata.new()
      porcelain
    end

    def self.convert_get_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GetResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_get_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_get_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_get_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_get_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_google_gke_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GoogleGKE.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.service_account_key = (plumbing.service_account_key)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_google_gke_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GoogleGKE.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.service_account_key = (porcelain.service_account_key)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_google_gke_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_google_gke_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_google_gke_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_google_gke_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_google_gke_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = GoogleGKEUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.service_account_key = (plumbing.service_account_key)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_google_gke_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::GoogleGKEUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.service_account_key = (porcelain.service_account_key)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_google_gke_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_google_gke_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_google_gke_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_google_gke_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_greenplum_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Greenplum.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_greenplum_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Greenplum.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_greenplum_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_greenplum_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_greenplum_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_greenplum_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPAuth.new()
      porcelain.auth_header = (plumbing.auth_header)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain
    end

    def self.convert_http_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPAuth.new()
      plumbing.auth_header = (porcelain.auth_header)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing
    end
    def self.convert_repeated_http_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_http_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_http_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_http_no_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HTTPNoAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.default_path = (plumbing.default_path)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.headers_blacklist = (plumbing.headers_blacklist)
      porcelain.healthcheck_path = (plumbing.healthcheck_path)
      porcelain.healthy = (plumbing.healthy)
      porcelain.host_override = (plumbing.host_override)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.url = (plumbing.url)
      porcelain
    end

    def self.convert_http_no_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HTTPNoAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.default_path = (porcelain.default_path)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.headers_blacklist = (porcelain.headers_blacklist)
      plumbing.healthcheck_path = (porcelain.healthcheck_path)
      plumbing.healthy = (porcelain.healthy)
      plumbing.host_override = (porcelain.host_override)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.url = (porcelain.url)
      plumbing
    end
    def self.convert_repeated_http_no_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_http_no_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_http_no_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_http_no_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_healthcheck_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Healthcheck.new()
      porcelain.error_msg = (plumbing.error_msg)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.node_id = (plumbing.node_id)
      porcelain.node_name = (plumbing.node_name)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.resource_name = (plumbing.resource_name)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_healthcheck_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Healthcheck.new()
      plumbing.error_msg = (porcelain.error_msg)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.node_id = (porcelain.node_id)
      plumbing.node_name = (porcelain.node_name)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.resource_name = (porcelain.resource_name)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_healthcheck_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_healthcheck_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_healthcheck_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_healthcheck_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_healthcheck_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HealthcheckListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_healthcheck_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HealthcheckListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_healthcheck_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_healthcheck_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_healthcheck_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_healthcheck_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_healthcheck_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HealthcheckRequest.new()
      porcelain.secret_engine_id = (plumbing.secret_engine_id)
      porcelain
    end

    def self.convert_healthcheck_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HealthcheckRequest.new()
      plumbing.secret_engine_id = (porcelain.secret_engine_id)
      plumbing
    end
    def self.convert_repeated_healthcheck_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_healthcheck_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_healthcheck_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_healthcheck_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_healthcheck_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HealthcheckResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.status = convert_repeated_healthcheck_status_to_porcelain(plumbing.status)
      porcelain
    end

    def self.convert_healthcheck_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HealthcheckResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.status += convert_repeated_healthcheck_status_to_plumbing(porcelain.status)
      plumbing
    end
    def self.convert_repeated_healthcheck_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_healthcheck_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_healthcheck_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_healthcheck_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_healthcheck_status_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = HealthcheckStatus.new()
      porcelain.node_id = (plumbing.node_id)
      porcelain.status = (plumbing.status)
      porcelain
    end

    def self.convert_healthcheck_status_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::HealthcheckStatus.new()
      plumbing.node_id = (porcelain.node_id)
      plumbing.status = (porcelain.status)
      plumbing
    end
    def self.convert_repeated_healthcheck_status_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_healthcheck_status_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_healthcheck_status_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_healthcheck_status_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAlias.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_identity_alias_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAlias.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_identity_alias_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAliasCreateResponse.new()
      porcelain.identity_alias = convert_identity_alias_to_porcelain(plumbing.identity_alias)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_alias_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAliasCreateResponse.new()
      plumbing.identity_alias = convert_identity_alias_to_plumbing(porcelain.identity_alias)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_alias_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAliasDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_alias_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAliasDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_alias_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAliasGetResponse.new()
      porcelain.identity_alias = convert_identity_alias_to_porcelain(plumbing.identity_alias)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_alias_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAliasGetResponse.new()
      plumbing.identity_alias = convert_identity_alias_to_plumbing(porcelain.identity_alias)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_alias_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAliasHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.identity_alias = convert_identity_alias_to_porcelain(plumbing.identity_alias)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_identity_alias_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAliasHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.identity_alias = convert_identity_alias_to_plumbing(porcelain.identity_alias)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_identity_alias_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_alias_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentityAliasUpdateResponse.new()
      porcelain.identity_alias = convert_identity_alias_to_porcelain(plumbing.identity_alias)
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_alias_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentityAliasUpdateResponse.new()
      plumbing.identity_alias = convert_identity_alias_to_plumbing(porcelain.identity_alias)
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_alias_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_alias_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_alias_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_alias_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySet.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain
    end

    def self.convert_identity_set_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySet.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing
    end
    def self.convert_repeated_identity_set_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySetCreateResponse.new()
      porcelain.identity_set = convert_identity_set_to_porcelain(plumbing.identity_set)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_set_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySetCreateResponse.new()
      plumbing.identity_set = convert_identity_set_to_plumbing(porcelain.identity_set)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_set_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySetDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_set_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySetDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_set_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySetGetResponse.new()
      porcelain.identity_set = convert_identity_set_to_porcelain(plumbing.identity_set)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_set_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySetGetResponse.new()
      plumbing.identity_set = convert_identity_set_to_plumbing(porcelain.identity_set)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_set_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySetHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.identity_set = convert_identity_set_to_porcelain(plumbing.identity_set)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_identity_set_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySetHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.identity_set = convert_identity_set_to_plumbing(porcelain.identity_set)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_identity_set_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_identity_set_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = IdentitySetUpdateResponse.new()
      porcelain.identity_set = convert_identity_set_to_porcelain(plumbing.identity_set)
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_identity_set_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::IdentitySetUpdateResponse.new()
      plumbing.identity_set = convert_identity_set_to_plumbing(porcelain.identity_set)
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_identity_set_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_identity_set_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_identity_set_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_identity_set_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_key_value_engine_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KeyValueEngine.new()
      porcelain.id = (plumbing.id)
      porcelain.key_rotation_interval_days = (plumbing.key_rotation_interval_days)
      porcelain.name = (plumbing.name)
      porcelain.public_key = (plumbing.public_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.secret_store_root_path = (plumbing.secret_store_root_path)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_key_value_engine_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KeyValueEngine.new()
      plumbing.id = (porcelain.id)
      plumbing.key_rotation_interval_days = (porcelain.key_rotation_interval_days)
      plumbing.name = (porcelain.name)
      plumbing.public_key = (porcelain.public_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.secret_store_root_path = (porcelain.secret_store_root_path)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_key_value_engine_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_key_value_engine_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_key_value_engine_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_key_value_engine_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_keyfactor_ssh_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KeyfactorSSHStore.new()
      porcelain.ca_file_path = (plumbing.ca_file_path)
      porcelain.certificate_file_path = (plumbing.certificate_file_path)
      porcelain.default_certificate_authority_name = (plumbing.default_certificate_authority_name)
      porcelain.default_certificate_profile_name = (plumbing.default_certificate_profile_name)
      porcelain.default_end_entity_profile_name = (plumbing.default_end_entity_profile_name)
      porcelain.enrollment_code_env_var = (plumbing.enrollment_code_env_var)
      porcelain.enrollment_username_env_var = (plumbing.enrollment_username_env_var)
      porcelain.id = (plumbing.id)
      porcelain.key_file_path = (plumbing.key_file_path)
      porcelain.name = (plumbing.name)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_keyfactor_ssh_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KeyfactorSSHStore.new()
      plumbing.ca_file_path = (porcelain.ca_file_path)
      plumbing.certificate_file_path = (porcelain.certificate_file_path)
      plumbing.default_certificate_authority_name = (porcelain.default_certificate_authority_name)
      plumbing.default_certificate_profile_name = (porcelain.default_certificate_profile_name)
      plumbing.default_end_entity_profile_name = (porcelain.default_end_entity_profile_name)
      plumbing.enrollment_code_env_var = (porcelain.enrollment_code_env_var)
      plumbing.enrollment_username_env_var = (porcelain.enrollment_username_env_var)
      plumbing.id = (porcelain.id)
      plumbing.key_file_path = (porcelain.key_file_path)
      plumbing.name = (porcelain.name)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_keyfactor_ssh_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_keyfactor_ssh_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_keyfactor_ssh_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_keyfactor_ssh_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_keyfactor_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KeyfactorX509Store.new()
      porcelain.ca_file_path = (plumbing.ca_file_path)
      porcelain.certificate_file_path = (plumbing.certificate_file_path)
      porcelain.default_certificate_authority_name = (plumbing.default_certificate_authority_name)
      porcelain.default_certificate_profile_name = (plumbing.default_certificate_profile_name)
      porcelain.default_end_entity_profile_name = (plumbing.default_end_entity_profile_name)
      porcelain.enrollment_code_env_var = (plumbing.enrollment_code_env_var)
      porcelain.enrollment_username_env_var = (plumbing.enrollment_username_env_var)
      porcelain.id = (plumbing.id)
      porcelain.key_file_path = (plumbing.key_file_path)
      porcelain.name = (plumbing.name)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_keyfactor_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KeyfactorX509Store.new()
      plumbing.ca_file_path = (porcelain.ca_file_path)
      plumbing.certificate_file_path = (porcelain.certificate_file_path)
      plumbing.default_certificate_authority_name = (porcelain.default_certificate_authority_name)
      plumbing.default_certificate_profile_name = (porcelain.default_certificate_profile_name)
      plumbing.default_end_entity_profile_name = (porcelain.default_end_entity_profile_name)
      plumbing.enrollment_code_env_var = (porcelain.enrollment_code_env_var)
      plumbing.enrollment_username_env_var = (porcelain.enrollment_username_env_var)
      plumbing.id = (porcelain.id)
      plumbing.key_file_path = (porcelain.key_file_path)
      plumbing.name = (porcelain.name)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_keyfactor_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_keyfactor_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_keyfactor_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_keyfactor_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Kubernetes.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_kubernetes_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Kubernetes.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_kubernetes_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_basic_auth_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesBasicAuth.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_kubernetes_basic_auth_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesBasicAuth.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_kubernetes_basic_auth_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_basic_auth_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_basic_auth_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_basic_auth_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_pod_identity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesPodIdentity.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_kubernetes_pod_identity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesPodIdentity.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_kubernetes_pod_identity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_pod_identity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_pod_identity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_pod_identity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_service_account_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesServiceAccount.new()
      porcelain.allow_resource_role_bypass = (plumbing.allow_resource_role_bypass)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.discovery_enabled = (plumbing.discovery_enabled)
      porcelain.discovery_username = (plumbing.discovery_username)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_kubernetes_service_account_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesServiceAccount.new()
      plumbing.allow_resource_role_bypass = (porcelain.allow_resource_role_bypass)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.discovery_enabled = (porcelain.discovery_enabled)
      plumbing.discovery_username = (porcelain.discovery_username)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_kubernetes_service_account_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_service_account_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_service_account_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_service_account_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesServiceAccountUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesServiceAccountUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_kubernetes_service_account_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_service_account_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_kubernetes_user_impersonation_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = KubernetesUserImpersonation.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_namespace = (plumbing.healthcheck_namespace)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_kubernetes_user_impersonation_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::KubernetesUserImpersonation.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_namespace = (porcelain.healthcheck_namespace)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_kubernetes_user_impersonation_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_kubernetes_user_impersonation_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_kubernetes_user_impersonation_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_kubernetes_user_impersonation_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mtls_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MTLSMysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.server_name = (plumbing.server_name)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mtls_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MTLSMysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.server_name = (porcelain.server_name)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mtls_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mtls_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mtls_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mtls_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mtls_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MTLSPostgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.certificate_authority = (plumbing.certificate_authority)
      porcelain.client_certificate = (plumbing.client_certificate)
      porcelain.client_key = (plumbing.client_key)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.server_name = (plumbing.server_name)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mtls_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MTLSPostgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.certificate_authority = (porcelain.certificate_authority)
      plumbing.client_certificate = (porcelain.client_certificate)
      plumbing.client_key = (porcelain.client_key)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.server_name = (porcelain.server_name)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mtls_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mtls_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mtls_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mtls_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecret.new()
      porcelain.config = (plumbing.config)
      porcelain.expires_at = convert_timestamp_to_porcelain(plumbing.expires_at)
      porcelain.id = (plumbing.id)
      porcelain.last_rotated_at = convert_timestamp_to_porcelain(plumbing.last_rotated_at)
      porcelain.name = (plumbing.name)
      porcelain.policy = convert_managed_secret_policy_to_porcelain(plumbing.policy)
      porcelain.secret_engine_id = (plumbing.secret_engine_id)
      porcelain.secret_store_path = (plumbing.secret_store_path)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.value = (plumbing.value)
      porcelain
    end

    def self.convert_managed_secret_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecret.new()
      plumbing.config = (porcelain.config)
      plumbing.expires_at = convert_timestamp_to_plumbing(porcelain.expires_at)
      plumbing.id = (porcelain.id)
      plumbing.last_rotated_at = convert_timestamp_to_plumbing(porcelain.last_rotated_at)
      plumbing.name = (porcelain.name)
      plumbing.policy = convert_managed_secret_policy_to_plumbing(porcelain.policy)
      plumbing.secret_engine_id = (porcelain.secret_engine_id)
      plumbing.secret_store_path = (porcelain.secret_store_path)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.value = (porcelain.value)
      plumbing
    end
    def self.convert_repeated_managed_secret_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_create_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretCreateRequest.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain
    end

    def self.convert_managed_secret_create_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretCreateRequest.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing
    end
    def self.convert_repeated_managed_secret_create_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_create_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_create_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_create_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretCreateResponse.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretCreateResponse.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_delete_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretDeleteRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_managed_secret_delete_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretDeleteRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_managed_secret_delete_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_delete_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_delete_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_delete_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretDeleteResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretDeleteResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_get_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretGetRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_managed_secret_get_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretGetRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_managed_secret_get_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_get_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_get_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_get_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretGetResponse.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretGetResponse.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_managed_secret_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_managed_secret_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_log_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretLog.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.action = (plumbing.action)
      porcelain.created_at = convert_timestamp_to_porcelain(plumbing.created_at)
      porcelain.debug = (plumbing.debug)
      porcelain.id = (plumbing.id)
      porcelain.managed_secret_id = (plumbing.managed_secret_id)
      porcelain.secret_engine_id = (plumbing.secret_engine_id)
      porcelain
    end

    def self.convert_managed_secret_log_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretLog.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.action = (porcelain.action)
      plumbing.created_at = convert_timestamp_to_plumbing(porcelain.created_at)
      plumbing.debug = (porcelain.debug)
      plumbing.id = (porcelain.id)
      plumbing.managed_secret_id = (porcelain.managed_secret_id)
      plumbing.secret_engine_id = (porcelain.secret_engine_id)
      plumbing
    end
    def self.convert_repeated_managed_secret_log_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_log_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_log_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_log_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_logs_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretLogsRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_managed_secret_logs_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretLogsRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_managed_secret_logs_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_logs_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_logs_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_logs_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_logs_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretLogsResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_logs_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretLogsResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_logs_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_logs_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_logs_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_logs_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_password_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretPasswordPolicy.new()
      porcelain.allow_repeat = (plumbing.allow_repeat)
      porcelain.exclude_characters = (plumbing.exclude_characters)
      porcelain.exclude_upper_case = (plumbing.exclude_upper_case)
      porcelain.length = (plumbing.length)
      porcelain.num_digits = (plumbing.num_digits)
      porcelain.num_symbols = (plumbing.num_symbols)
      porcelain
    end

    def self.convert_managed_secret_password_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretPasswordPolicy.new()
      plumbing.allow_repeat = (porcelain.allow_repeat)
      plumbing.exclude_characters = (porcelain.exclude_characters)
      plumbing.exclude_upper_case = (porcelain.exclude_upper_case)
      plumbing.length = (porcelain.length)
      plumbing.num_digits = (porcelain.num_digits)
      plumbing.num_symbols = (porcelain.num_symbols)
      plumbing
    end
    def self.convert_repeated_managed_secret_password_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_password_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_password_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_password_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretPolicy.new()
      porcelain.password_policy = convert_managed_secret_password_policy_to_porcelain(plumbing.password_policy)
      porcelain.rotation_policy = convert_managed_secret_rotation_policy_to_porcelain(plumbing.rotation_policy)
      porcelain
    end

    def self.convert_managed_secret_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretPolicy.new()
      plumbing.password_policy = convert_managed_secret_password_policy_to_plumbing(porcelain.password_policy)
      plumbing.rotation_policy = convert_managed_secret_rotation_policy_to_plumbing(porcelain.rotation_policy)
      plumbing
    end
    def self.convert_repeated_managed_secret_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_retrieve_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretRetrieveRequest.new()
      porcelain.id = (plumbing.id)
      porcelain.public_key = (plumbing.public_key)
      porcelain
    end

    def self.convert_managed_secret_retrieve_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretRetrieveRequest.new()
      plumbing.id = (porcelain.id)
      plumbing.public_key = (porcelain.public_key)
      plumbing
    end
    def self.convert_repeated_managed_secret_retrieve_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_retrieve_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_retrieve_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_retrieve_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_retrieve_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretRetrieveResponse.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_retrieve_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretRetrieveResponse.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_retrieve_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_retrieve_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_retrieve_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_retrieve_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_rotate_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretRotateRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_managed_secret_rotate_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretRotateRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_managed_secret_rotate_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_rotate_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_rotate_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_rotate_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_rotate_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretRotateResponse.new()
      porcelain.meta = convert_generic_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_rotate_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretRotateResponse.new()
      plumbing.meta = convert_generic_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_rotate_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_rotate_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_rotate_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_rotate_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_rotation_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretRotationPolicy.new()
      porcelain
    end

    def self.convert_managed_secret_rotation_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretRotationPolicy.new()
      plumbing
    end
    def self.convert_repeated_managed_secret_rotation_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_rotation_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_rotation_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_rotation_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_update_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretUpdateRequest.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain
    end

    def self.convert_managed_secret_update_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretUpdateRequest.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing
    end
    def self.convert_repeated_managed_secret_update_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_update_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_update_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_update_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretUpdateResponse.new()
      porcelain.managed_secret = convert_managed_secret_to_porcelain(plumbing.managed_secret)
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_managed_secret_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretUpdateResponse.new()
      plumbing.managed_secret = convert_managed_secret_to_plumbing(porcelain.managed_secret)
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_managed_secret_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_validate_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretValidateRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_managed_secret_validate_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretValidateRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_managed_secret_validate_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_validate_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_validate_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_validate_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_managed_secret_validate_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ManagedSecretValidateResponse.new()
      porcelain.invalid_info = (plumbing.invalid_info)
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.valid = (plumbing.valid)
      porcelain
    end

    def self.convert_managed_secret_validate_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ManagedSecretValidateResponse.new()
      plumbing.invalid_info = (porcelain.invalid_info)
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.valid = (porcelain.valid)
      plumbing
    end
    def self.convert_repeated_managed_secret_validate_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_managed_secret_validate_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_managed_secret_validate_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_managed_secret_validate_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_maria_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Maria.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_maria_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Maria.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_maria_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_maria_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_maria_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_maria_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_memcached_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Memcached.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_memcached_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Memcached.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_memcached_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_memcached_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_memcached_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_memcached_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_memsql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Memsql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_memsql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Memsql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_memsql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_memsql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_memsql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_memsql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_legacy_host_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoLegacyHost.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_legacy_host_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoLegacyHost.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_legacy_host_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_legacy_host_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_legacy_host_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_legacy_host_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_legacy_replicaset_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoLegacyReplicaset.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_legacy_replicaset_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoLegacyReplicaset.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_legacy_replicaset_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_legacy_replicaset_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_legacy_replicaset_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_legacy_replicaset_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_replica_set_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoReplicaSet.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.connect_to_replica = (plumbing.connect_to_replica)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.replica_set = (plumbing.replica_set)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_replica_set_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoReplicaSet.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.connect_to_replica = (porcelain.connect_to_replica)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.replica_set = (porcelain.replica_set)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_replica_set_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_replica_set_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_replica_set_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_replica_set_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mongo_sharded_cluster_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = MongoShardedCluster.new()
      porcelain.auth_database = (plumbing.auth_database)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mongo_sharded_cluster_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::MongoShardedCluster.new()
      plumbing.auth_database = (porcelain.auth_database)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mongo_sharded_cluster_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mongo_sharded_cluster_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mongo_sharded_cluster_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mongo_sharded_cluster_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_mysql_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Mysql.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_mysql_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Mysql.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_mysql_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_mysql_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_mysql_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_mysql_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_neptune_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Neptune.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_neptune_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Neptune.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_neptune_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_neptune_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_neptune_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_neptune_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_neptune_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NeptuneIAM.new()
      porcelain.access_key = (plumbing.access_key)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.endpoint = (plumbing.endpoint)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_arn = (plumbing.role_arn)
      porcelain.role_external_id = (plumbing.role_external_id)
      porcelain.secret_access_key = (plumbing.secret_access_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_neptune_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NeptuneIAM.new()
      plumbing.access_key = (porcelain.access_key)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.endpoint = (porcelain.endpoint)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_arn = (porcelain.role_arn)
      plumbing.role_external_id = (porcelain.role_external_id)
      plumbing.secret_access_key = (porcelain.secret_access_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_neptune_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_neptune_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_neptune_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_neptune_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Node.new()
      if porcelain.instance_of? Gateway
        plumbing.gateway = convert_gateway_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ProxyCluster
        plumbing.proxy_cluster = convert_proxy_cluster_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Relay
        plumbing.relay = convert_relay_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_node_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.gateway != nil
        return convert_gateway_to_porcelain(plumbing.gateway)
      end
      if plumbing.proxy_cluster != nil
        return convert_proxy_cluster_to_porcelain(plumbing.proxy_cluster)
      end
      if plumbing.relay != nil
        return convert_relay_to_porcelain(plumbing.relay)
      end
      raise UnknownError.new("unknown polymorphic type, please upgrade your SDK")
    end
    def self.convert_repeated_node_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.token = (plumbing.token)
      porcelain
    end

    def self.convert_node_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.token = (porcelain.token)
      plumbing
    end
    def self.convert_repeated_node_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_node_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_node_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_maintenance_window_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeMaintenanceWindow.new()
      porcelain.cron_schedule = (plumbing.cron_schedule)
      porcelain.require_idleness = (plumbing.require_idleness)
      porcelain
    end

    def self.convert_node_maintenance_window_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeMaintenanceWindow.new()
      plumbing.cron_schedule = (porcelain.cron_schedule)
      plumbing.require_idleness = (porcelain.require_idleness)
      plumbing
    end
    def self.convert_repeated_node_maintenance_window_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_maintenance_window_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_maintenance_window_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_maintenance_window_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_node_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = NodeUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.node = convert_node_to_porcelain(plumbing.node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_node_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::NodeUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.node = convert_node_to_plumbing(porcelain.node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_node_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_node_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_node_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_node_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_oracle_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Oracle.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_oracle_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Oracle.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_oracle_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_oracle_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_oracle_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_oracle_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_oracle_nne_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = OracleNNE.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_oracle_nne_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::OracleNNE.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_oracle_nne_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_oracle_nne_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_oracle_nne_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_oracle_nne_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_organization_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Organization.new()
      porcelain.auth_provider = (plumbing.auth_provider)
      porcelain.created_at = convert_timestamp_to_porcelain(plumbing.created_at)
      porcelain.device_trust_enabled = (plumbing.device_trust_enabled)
      porcelain.device_trust_provider = (plumbing.device_trust_provider)
      porcelain.discard_replays = (plumbing.discard_replays)
      porcelain.enforce_single_session = (plumbing.enforce_single_session)
      porcelain.idle_timeout = convert_duration_to_porcelain(plumbing.idle_timeout)
      porcelain.idle_timeout_enabled = (plumbing.idle_timeout_enabled)
      porcelain.kind = (plumbing.kind)
      porcelain.log_local_encoder = (plumbing.log_local_encoder)
      porcelain.log_local_format = (plumbing.log_local_format)
      porcelain.log_local_storage = (plumbing.log_local_storage)
      porcelain.log_remote_encoder = (plumbing.log_remote_encoder)
      porcelain.log_socket_path = (plumbing.log_socket_path)
      porcelain.log_tcp_address = (plumbing.log_tcp_address)
      porcelain.loopback_range = (plumbing.loopback_range)
      porcelain.mfa_enabled = (plumbing.mfa_enabled)
      porcelain.mfa_provider = (plumbing.mfa_provider)
      porcelain.name = (plumbing.name)
      porcelain.public_key_pem = (plumbing.public_key_pem)
      porcelain.require_secret_store = (plumbing.require_secret_store)
      porcelain.saml_metadata_url = (plumbing.saml_metadata_url)
      porcelain.scim_provider = (plumbing.scim_provider)
      porcelain.sensitive_label = (plumbing.sensitive_label)
      porcelain.session_timeout = convert_duration_to_porcelain(plumbing.session_timeout)
      porcelain.session_timeout_enabled = (plumbing.session_timeout_enabled)
      porcelain.ssh_certificate_authority_public_key = (plumbing.ssh_certificate_authority_public_key)
      porcelain.ssh_certificate_authority_updated_at = convert_timestamp_to_porcelain(plumbing.ssh_certificate_authority_updated_at)
      porcelain.updated_at = convert_timestamp_to_porcelain(plumbing.updated_at)
      porcelain.websites_subdomain = (plumbing.websites_subdomain)
      porcelain
    end

    def self.convert_organization_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Organization.new()
      plumbing.auth_provider = (porcelain.auth_provider)
      plumbing.created_at = convert_timestamp_to_plumbing(porcelain.created_at)
      plumbing.device_trust_enabled = (porcelain.device_trust_enabled)
      plumbing.device_trust_provider = (porcelain.device_trust_provider)
      plumbing.discard_replays = (porcelain.discard_replays)
      plumbing.enforce_single_session = (porcelain.enforce_single_session)
      plumbing.idle_timeout = convert_duration_to_plumbing(porcelain.idle_timeout)
      plumbing.idle_timeout_enabled = (porcelain.idle_timeout_enabled)
      plumbing.kind = (porcelain.kind)
      plumbing.log_local_encoder = (porcelain.log_local_encoder)
      plumbing.log_local_format = (porcelain.log_local_format)
      plumbing.log_local_storage = (porcelain.log_local_storage)
      plumbing.log_remote_encoder = (porcelain.log_remote_encoder)
      plumbing.log_socket_path = (porcelain.log_socket_path)
      plumbing.log_tcp_address = (porcelain.log_tcp_address)
      plumbing.loopback_range = (porcelain.loopback_range)
      plumbing.mfa_enabled = (porcelain.mfa_enabled)
      plumbing.mfa_provider = (porcelain.mfa_provider)
      plumbing.name = (porcelain.name)
      plumbing.public_key_pem = (porcelain.public_key_pem)
      plumbing.require_secret_store = (porcelain.require_secret_store)
      plumbing.saml_metadata_url = (porcelain.saml_metadata_url)
      plumbing.scim_provider = (porcelain.scim_provider)
      plumbing.sensitive_label = (porcelain.sensitive_label)
      plumbing.session_timeout = convert_duration_to_plumbing(porcelain.session_timeout)
      plumbing.session_timeout_enabled = (porcelain.session_timeout_enabled)
      plumbing.ssh_certificate_authority_public_key = (porcelain.ssh_certificate_authority_public_key)
      plumbing.ssh_certificate_authority_updated_at = convert_timestamp_to_plumbing(porcelain.ssh_certificate_authority_updated_at)
      plumbing.updated_at = convert_timestamp_to_plumbing(porcelain.updated_at)
      plumbing.websites_subdomain = (porcelain.websites_subdomain)
      plumbing
    end
    def self.convert_repeated_organization_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_organization_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_organization_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_organization_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_organization_history_record_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = OrganizationHistoryRecord.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.organization = convert_organization_to_porcelain(plumbing.organization)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_organization_history_record_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::OrganizationHistoryRecord.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.organization = convert_organization_to_plumbing(porcelain.organization)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_organization_history_record_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_organization_history_record_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_organization_history_record_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_organization_history_record_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroup.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain
    end

    def self.convert_peering_group_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroup.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing
    end
    def self.convert_repeated_peering_group_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group = convert_peering_group_to_porcelain(plumbing.peering_group)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group = convert_peering_group_to_plumbing(porcelain.peering_group)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group = convert_peering_group_to_porcelain(plumbing.peering_group)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group = convert_peering_group_to_plumbing(porcelain.peering_group)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_node_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupNode.new()
      porcelain.group_id = (plumbing.group_id)
      porcelain.id = (plumbing.id)
      porcelain.node_id = (plumbing.node_id)
      porcelain
    end

    def self.convert_peering_group_node_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupNode.new()
      plumbing.group_id = (porcelain.group_id)
      plumbing.id = (porcelain.id)
      plumbing.node_id = (porcelain.node_id)
      plumbing
    end
    def self.convert_repeated_peering_group_node_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_node_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_node_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_node_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_node_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupNodeCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_node = convert_peering_group_node_to_porcelain(plumbing.peering_group_node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_node_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupNodeCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_node = convert_peering_group_node_to_plumbing(porcelain.peering_group_node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_node_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_node_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_node_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_node_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_node_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupNodeDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_node_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupNodeDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_node_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_node_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_node_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_node_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_node_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupNodeGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_node = convert_peering_group_node_to_porcelain(plumbing.peering_group_node)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_node_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupNodeGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_node = convert_peering_group_node_to_plumbing(porcelain.peering_group_node)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_node_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_node_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_node_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_node_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_peer_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupPeer.new()
      porcelain.group_id = (plumbing.group_id)
      porcelain.id = (plumbing.id)
      porcelain.peers_with_group_id = (plumbing.peers_with_group_id)
      porcelain
    end

    def self.convert_peering_group_peer_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupPeer.new()
      plumbing.group_id = (porcelain.group_id)
      plumbing.id = (porcelain.id)
      plumbing.peers_with_group_id = (porcelain.peers_with_group_id)
      plumbing
    end
    def self.convert_repeated_peering_group_peer_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_peer_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_peer_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_peer_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_peer_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupPeerCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_peer = convert_peering_group_peer_to_porcelain(plumbing.peering_group_peer)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_peer_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupPeerCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_peer = convert_peering_group_peer_to_plumbing(porcelain.peering_group_peer)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_peer_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_peer_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_peer_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_peer_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_peer_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupPeerDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_peer_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupPeerDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_peer_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_peer_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_peer_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_peer_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_peer_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupPeerGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_peer = convert_peering_group_peer_to_porcelain(plumbing.peering_group_peer)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_peer_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupPeerGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_peer = convert_peering_group_peer_to_plumbing(porcelain.peering_group_peer)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_peer_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_peer_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_peer_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_peer_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupResource.new()
      porcelain.group_id = (plumbing.group_id)
      porcelain.id = (plumbing.id)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain
    end

    def self.convert_peering_group_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupResource.new()
      plumbing.group_id = (porcelain.group_id)
      plumbing.id = (porcelain.id)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing
    end
    def self.convert_repeated_peering_group_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_resource_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupResourceCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_resource = convert_peering_group_resource_to_porcelain(plumbing.peering_group_resource)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_resource_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupResourceCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_resource = convert_peering_group_resource_to_plumbing(porcelain.peering_group_resource)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_resource_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_resource_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_resource_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_resource_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_resource_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupResourceDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_resource_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupResourceDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_resource_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_resource_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_resource_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_resource_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_peering_group_resource_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PeeringGroupResourceGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.peering_group_resource = convert_peering_group_resource_to_porcelain(plumbing.peering_group_resource)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_peering_group_resource_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PeeringGroupResourceGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.peering_group_resource = convert_peering_group_resource_to_plumbing(porcelain.peering_group_resource)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_peering_group_resource_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_peering_group_resource_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_peering_group_resource_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_peering_group_resource_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Policy.new()
      porcelain.description = (plumbing.description)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.policy = (plumbing.policy)
      porcelain
    end

    def self.convert_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Policy.new()
      plumbing.description = (porcelain.description)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.policy = (porcelain.policy)
      plumbing
    end
    def self.convert_repeated_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyCreateResponse.new()
      porcelain.policy = convert_policy_to_porcelain(plumbing.policy)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_policy_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyCreateResponse.new()
      plumbing.policy = convert_policy_to_plumbing(porcelain.policy)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_policy_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyDeleteResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_policy_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyDeleteResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_policy_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.policy = convert_policy_to_porcelain(plumbing.policy)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_policy_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.policy = convert_policy_to_plumbing(porcelain.policy)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_policy_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.policy = convert_policy_to_porcelain(plumbing.policy)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_policy_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.policy = convert_policy_to_plumbing(porcelain.policy)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_policy_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_policy_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_policy_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_policy_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = PolicyUpdateResponse.new()
      porcelain.policy = convert_policy_to_porcelain(plumbing.policy)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_policy_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::PolicyUpdateResponse.new()
      plumbing.policy = convert_policy_to_plumbing(porcelain.policy)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_policy_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_policy_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_policy_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_policy_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_postgres_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Postgres.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_postgres_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Postgres.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_postgres_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_postgres_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_postgres_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_postgres_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_presto_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Presto.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_presto_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Presto.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_presto_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_presto_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_presto_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_presto_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_proxy_cluster_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ProxyCluster.new()
      porcelain.address = (plumbing.address)
      porcelain.id = (plumbing.id)
      porcelain.maintenance_windows = convert_repeated_node_maintenance_window_to_porcelain(plumbing.maintenance_windows)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_proxy_cluster_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ProxyCluster.new()
      plumbing.address = (porcelain.address)
      plumbing.id = (porcelain.id)
      plumbing.maintenance_windows += convert_repeated_node_maintenance_window_to_plumbing(porcelain.maintenance_windows)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_proxy_cluster_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_proxy_cluster_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_proxy_cluster_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_proxy_cluster_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_proxy_cluster_key_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ProxyClusterKey.new()
      porcelain.created_at = convert_timestamp_to_porcelain(plumbing.created_at)
      porcelain.id = (plumbing.id)
      porcelain.last_used_at = convert_timestamp_to_porcelain(plumbing.last_used_at)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain
    end

    def self.convert_proxy_cluster_key_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ProxyClusterKey.new()
      plumbing.created_at = convert_timestamp_to_plumbing(porcelain.created_at)
      plumbing.id = (porcelain.id)
      plumbing.last_used_at = convert_timestamp_to_plumbing(porcelain.last_used_at)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing
    end
    def self.convert_repeated_proxy_cluster_key_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_proxy_cluster_key_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_proxy_cluster_key_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_proxy_cluster_key_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_proxy_cluster_key_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ProxyClusterKeyCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.proxy_cluster_key = convert_proxy_cluster_key_to_porcelain(plumbing.proxy_cluster_key)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_key = (plumbing.secret_key)
      porcelain
    end

    def self.convert_proxy_cluster_key_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ProxyClusterKeyCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.proxy_cluster_key = convert_proxy_cluster_key_to_plumbing(porcelain.proxy_cluster_key)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_key = (porcelain.secret_key)
      plumbing
    end
    def self.convert_repeated_proxy_cluster_key_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_proxy_cluster_key_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_proxy_cluster_key_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_proxy_cluster_key_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_proxy_cluster_key_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ProxyClusterKeyDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_proxy_cluster_key_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ProxyClusterKeyDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_proxy_cluster_key_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_proxy_cluster_key_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_proxy_cluster_key_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_proxy_cluster_key_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_proxy_cluster_key_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ProxyClusterKeyGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.proxy_cluster_key = convert_proxy_cluster_key_to_porcelain(plumbing.proxy_cluster_key)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_proxy_cluster_key_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ProxyClusterKeyGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.proxy_cluster_key = convert_proxy_cluster_key_to_plumbing(porcelain.proxy_cluster_key)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_proxy_cluster_key_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_proxy_cluster_key_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_proxy_cluster_key_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_proxy_cluster_key_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_query_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Query.new()
      porcelain.account_email = (plumbing.account_email)
      porcelain.account_first_name = (plumbing.account_first_name)
      porcelain.account_id = (plumbing.account_id)
      porcelain.account_last_name = (plumbing.account_last_name)
      porcelain.account_tags = convert_tags_to_porcelain(plumbing.account_tags)
      porcelain.authzjson = (plumbing.authzJson)
      porcelain.capture = convert_query_capture_to_porcelain(plumbing.capture)
      porcelain.client_ip = (plumbing.client_ip)
      porcelain.completed_at = convert_timestamp_to_porcelain(plumbing.completed_at)
      porcelain.duration = convert_duration_to_porcelain(plumbing.duration)
      porcelain.egress_node_id = (plumbing.egress_node_id)
      porcelain.encrypted = (plumbing.encrypted)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_username = (plumbing.identity_alias_username)
      porcelain.query_body = (plumbing.query_body)
      porcelain.query_category = (plumbing.query_category)
      porcelain.query_hash = (plumbing.query_hash)
      porcelain.query_key = (plumbing.query_key)
      porcelain.record_count = (plumbing.record_count)
      porcelain.remote_identity_username = (plumbing.remote_identity_username)
      porcelain.replayable = (plumbing.replayable)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.resource_name = (plumbing.resource_name)
      porcelain.resource_tags = convert_tags_to_porcelain(plumbing.resource_tags)
      porcelain.resource_type = (plumbing.resource_type)
      porcelain.source_ip = (plumbing.source_ip)
      porcelain.target = (plumbing.target)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_query_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Query.new()
      plumbing.account_email = (porcelain.account_email)
      plumbing.account_first_name = (porcelain.account_first_name)
      plumbing.account_id = (porcelain.account_id)
      plumbing.account_last_name = (porcelain.account_last_name)
      plumbing.account_tags = convert_tags_to_plumbing(porcelain.account_tags)
      plumbing.authzJson = (porcelain.authzjson)
      plumbing.capture = convert_query_capture_to_plumbing(porcelain.capture)
      plumbing.client_ip = (porcelain.client_ip)
      plumbing.completed_at = convert_timestamp_to_plumbing(porcelain.completed_at)
      plumbing.duration = convert_duration_to_plumbing(porcelain.duration)
      plumbing.egress_node_id = (porcelain.egress_node_id)
      plumbing.encrypted = (porcelain.encrypted)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_username = (porcelain.identity_alias_username)
      plumbing.query_body = (porcelain.query_body)
      plumbing.query_category = (porcelain.query_category)
      plumbing.query_hash = (porcelain.query_hash)
      plumbing.query_key = (porcelain.query_key)
      plumbing.record_count = (porcelain.record_count)
      plumbing.remote_identity_username = (porcelain.remote_identity_username)
      plumbing.replayable = (porcelain.replayable)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.resource_name = (porcelain.resource_name)
      plumbing.resource_tags = convert_tags_to_plumbing(porcelain.resource_tags)
      plumbing.resource_type = (porcelain.resource_type)
      plumbing.source_ip = (porcelain.source_ip)
      plumbing.target = (porcelain.target)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_query_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_query_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_query_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_query_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_query_capture_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = QueryCapture.new()
      porcelain.client_command = (plumbing.client_command)
      porcelain.command = (plumbing.command)
      porcelain.container = (plumbing.container)
      porcelain.env = (plumbing.env)
      porcelain.file_name = (plumbing.file_name)
      porcelain.file_size = (plumbing.file_size)
      porcelain.height = (plumbing.height)
      porcelain.impersonation_groups = (plumbing.impersonation_groups)
      porcelain.impersonation_user = (plumbing.impersonation_user)
      porcelain.pod = (plumbing.pod)
      porcelain.privilege_groups = (plumbing.privilege_groups)
      porcelain.request_body = (plumbing.request_body)
      porcelain.request_method = (plumbing.request_method)
      porcelain.request_uri = (plumbing.request_uri)
      porcelain.type = (plumbing.type)
      porcelain.width = (plumbing.width)
      porcelain
    end

    def self.convert_query_capture_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::QueryCapture.new()
      plumbing.client_command = (porcelain.client_command)
      plumbing.command = (porcelain.command)
      plumbing.container = (porcelain.container)
      plumbing.env = (porcelain.env)
      plumbing.file_name = (porcelain.file_name)
      plumbing.file_size = (porcelain.file_size)
      plumbing.height = (porcelain.height)
      plumbing.impersonation_groups += (porcelain.impersonation_groups)
      plumbing.impersonation_user = (porcelain.impersonation_user)
      plumbing.pod = (porcelain.pod)
      plumbing.privilege_groups += (porcelain.privilege_groups)
      plumbing.request_body = (porcelain.request_body)
      plumbing.request_method = (porcelain.request_method)
      plumbing.request_uri = (porcelain.request_uri)
      plumbing.type = (porcelain.type)
      plumbing.width = (porcelain.width)
      plumbing
    end
    def self.convert_repeated_query_capture_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_query_capture_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_query_capture_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_query_capture_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rdp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RDP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.downgrade_nla_connections = (plumbing.downgrade_nla_connections)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.lock_required = (plumbing.lock_required)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rdp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RDP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.downgrade_nla_connections = (porcelain.downgrade_nla_connections)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.lock_required = (porcelain.lock_required)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rdp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rdp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rdp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rdp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rdp_cert_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RDPCert.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.lock_required = (plumbing.lock_required)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rdp_cert_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RDPCert.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.lock_required = (porcelain.lock_required)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rdp_cert_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rdp_cert_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rdp_cert_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rdp_cert_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rds_postgres_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RDSPostgresIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_assumption_arn = (plumbing.role_assumption_arn)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rds_postgres_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RDSPostgresIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_assumption_arn = (porcelain.role_assumption_arn)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rds_postgres_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rds_postgres_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rds_postgres_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rds_postgres_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rabbit_mqamqp_091_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RabbitMQAMQP091.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_rabbit_mqamqp_091_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RabbitMQAMQP091.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_rabbit_mqamqp_091_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rabbit_mqamqp_091_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rabbit_mqamqp_091_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rabbit_mqamqp_091_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_rate_limit_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RateLimitMetadata.new()
      porcelain.bucket = (plumbing.bucket)
      porcelain.limit = (plumbing.limit)
      porcelain.remaining = (plumbing.remaining)
      porcelain.reset_at = convert_timestamp_to_porcelain(plumbing.reset_at)
      porcelain
    end

    def self.convert_rate_limit_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RateLimitMetadata.new()
      plumbing.bucket = (porcelain.bucket)
      plumbing.limit = (porcelain.limit)
      plumbing.remaining = (porcelain.remaining)
      plumbing.reset_at = convert_timestamp_to_plumbing(porcelain.reset_at)
      plumbing
    end
    def self.convert_repeated_rate_limit_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_rate_limit_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_rate_limit_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_rate_limit_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_raw_tcp_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RawTCP.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_raw_tcp_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RawTCP.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_raw_tcp_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_raw_tcp_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_raw_tcp_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_raw_tcp_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redis_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Redis.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_redis_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Redis.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_redis_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redis_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redis_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redis_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redis_cluster_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RedisCluster.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_redis_cluster_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RedisCluster.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_redis_cluster_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redis_cluster_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redis_cluster_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redis_cluster_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redshift_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Redshift.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_redshift_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Redshift.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_redshift_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redshift_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redshift_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redshift_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redshift_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RedshiftIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.cluster_id = (plumbing.cluster_id)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_assumption_arn = (plumbing.role_assumption_arn)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_redshift_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RedshiftIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.cluster_id = (porcelain.cluster_id)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_assumption_arn = (porcelain.role_assumption_arn)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_redshift_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redshift_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redshift_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redshift_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_redshift_serverless_iam_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RedshiftServerlessIAM.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.region = (plumbing.region)
      porcelain.role_assumption_arn = (plumbing.role_assumption_arn)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.workgroup = (plumbing.workgroup)
      porcelain
    end

    def self.convert_redshift_serverless_iam_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RedshiftServerlessIAM.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.region = (porcelain.region)
      plumbing.role_assumption_arn = (porcelain.role_assumption_arn)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.workgroup = (porcelain.workgroup)
      plumbing
    end
    def self.convert_repeated_redshift_serverless_iam_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_redshift_serverless_iam_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_redshift_serverless_iam_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_redshift_serverless_iam_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_relay_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Relay.new()
      porcelain.device = (plumbing.device)
      porcelain.gateway_filter = (plumbing.gateway_filter)
      porcelain.id = (plumbing.id)
      porcelain.location = (plumbing.location)
      porcelain.maintenance_windows = convert_repeated_node_maintenance_window_to_porcelain(plumbing.maintenance_windows)
      porcelain.name = (plumbing.name)
      porcelain.state = (plumbing.state)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.version = (plumbing.version)
      porcelain
    end

    def self.convert_relay_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Relay.new()
      plumbing.device = (porcelain.device)
      plumbing.gateway_filter = (porcelain.gateway_filter)
      plumbing.id = (porcelain.id)
      plumbing.location = (porcelain.location)
      plumbing.maintenance_windows += convert_repeated_node_maintenance_window_to_plumbing(porcelain.maintenance_windows)
      plumbing.name = (porcelain.name)
      plumbing.state = (porcelain.state)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.version = (porcelain.version)
      plumbing
    end
    def self.convert_repeated_relay_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_relay_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_relay_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_relay_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentity.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.remote_identity_group_id = (plumbing.remote_identity_group_id)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_remote_identity_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentity.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.remote_identity_group_id = (porcelain.remote_identity_group_id)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_remote_identity_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_remote_identity_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_remote_identity_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_group_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGroup.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain
    end

    def self.convert_remote_identity_group_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGroup.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing
    end
    def self.convert_repeated_remote_identity_group_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_group_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_group_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_group_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_group_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGroupGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity_group = convert_remote_identity_group_to_porcelain(plumbing.remote_identity_group)
      porcelain
    end

    def self.convert_remote_identity_group_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGroupGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity_group = convert_remote_identity_group_to_plumbing(porcelain.remote_identity_group)
      plumbing
    end
    def self.convert_repeated_remote_identity_group_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_group_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_group_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_group_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_group_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityGroupHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.remote_identity_group = convert_remote_identity_group_to_porcelain(plumbing.remote_identity_group)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_remote_identity_group_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityGroupHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.remote_identity_group = convert_remote_identity_group_to_plumbing(porcelain.remote_identity_group)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_remote_identity_group_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_group_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_group_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_group_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_remote_identity_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_remote_identity_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_remote_identity_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RemoteIdentityUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.remote_identity = convert_remote_identity_to_porcelain(plumbing.remote_identity)
      porcelain
    end

    def self.convert_remote_identity_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RemoteIdentityUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.remote_identity = convert_remote_identity_to_plumbing(porcelain.remote_identity)
      plumbing
    end
    def self.convert_repeated_remote_identity_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_remote_identity_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_remote_identity_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_remote_identity_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_replay_chunk_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ReplayChunk.new()
      porcelain.data = (plumbing.data)
      porcelain.events = convert_repeated_replay_chunk_event_to_porcelain(plumbing.events)
      porcelain.symmetric_key = (plumbing.symmetric_key)
      porcelain
    end

    def self.convert_replay_chunk_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ReplayChunk.new()
      plumbing.data = (porcelain.data)
      plumbing.events += convert_repeated_replay_chunk_event_to_plumbing(porcelain.events)
      plumbing.symmetric_key = (porcelain.symmetric_key)
      plumbing
    end
    def self.convert_repeated_replay_chunk_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_replay_chunk_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_replay_chunk_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_replay_chunk_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_replay_chunk_event_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ReplayChunkEvent.new()
      porcelain.data = (plumbing.data)
      porcelain.duration = convert_duration_to_porcelain(plumbing.duration)
      porcelain
    end

    def self.convert_replay_chunk_event_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ReplayChunkEvent.new()
      plumbing.data = (porcelain.data)
      plumbing.duration = convert_duration_to_plumbing(porcelain.duration)
      plumbing
    end
    def self.convert_repeated_replay_chunk_event_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_replay_chunk_event_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_replay_chunk_event_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_replay_chunk_event_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_requestable_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RequestableResource.new()
      porcelain.access = (plumbing.access)
      porcelain.authentication = (plumbing.authentication)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.type = (plumbing.type)
      porcelain
    end

    def self.convert_requestable_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RequestableResource.new()
      plumbing.access = (porcelain.access)
      plumbing.authentication = (porcelain.authentication)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.type = (porcelain.type)
      plumbing
    end
    def self.convert_repeated_requestable_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_requestable_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_requestable_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_requestable_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Resource.new()
      if porcelain.instance_of? Aerospike
        plumbing.aerospike = convert_aerospike_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKS
        plumbing.aks = convert_aks_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSBasicAuth
        plumbing.aks_basic_auth = convert_aks_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSServiceAccount
        plumbing.aks_service_account = convert_aks_service_account_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSServiceAccountUserImpersonation
        plumbing.aks_service_account_user_impersonation = convert_aks_service_account_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AKSUserImpersonation
        plumbing.aks_user_impersonation = convert_aks_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKS
        plumbing.amazon_eks = convert_amazon_eks_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKSInstanceProfile
        plumbing.amazon_eks_instance_profile = convert_amazon_eks_instance_profile_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKSInstanceProfileUserImpersonation
        plumbing.amazon_eks_instance_profile_user_impersonation = convert_amazon_eks_instance_profile_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonEKSUserImpersonation
        plumbing.amazon_eks_user_impersonation = convert_amazon_eks_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonES
        plumbing.amazon_es = convert_amazon_es_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonESIAM
        plumbing.amazon_esiam = convert_amazon_esiam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AmazonMQAMQP091
        plumbing.amazon_mqamqp_091 = convert_amazon_mqamqp_091_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Athena
        plumbing.athena = convert_athena_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AthenaIAM
        plumbing.athena_iam = convert_athena_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraMysql
        plumbing.aurora_mysql = convert_aurora_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraMysqlIAM
        plumbing.aurora_mysql_iam = convert_aurora_mysql_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraPostgres
        plumbing.aurora_postgres = convert_aurora_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AuroraPostgresIAM
        plumbing.aurora_postgres_iam = convert_aurora_postgres_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWS
        plumbing.aws = convert_aws_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSConsole
        plumbing.aws_console = convert_aws_console_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSConsoleStaticKeyPair
        plumbing.aws_console_static_key_pair = convert_aws_console_static_key_pair_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSInstanceProfile
        plumbing.aws_instance_profile = convert_aws_instance_profile_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Azure
        plumbing.azure = convert_azure_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzureCertificate
        plumbing.azure_certificate = convert_azure_certificate_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzureMysql
        plumbing.azure_mysql = convert_azure_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzurePostgres
        plumbing.azure_postgres = convert_azure_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzurePostgresManagedIdentity
        plumbing.azure_postgres_managed_identity = convert_azure_postgres_managed_identity_to_plumbing(porcelain)
      end
      if porcelain.instance_of? BigQuery
        plumbing.big_query = convert_big_query_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Cassandra
        plumbing.cassandra = convert_cassandra_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Citus
        plumbing.citus = convert_citus_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ClickHouseHTTP
        plumbing.click_house_http = convert_click_house_http_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ClickHouseMySQL
        plumbing.click_house_my_sql = convert_click_house_my_sql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ClickHouseTCP
        plumbing.click_house_tcp = convert_click_house_tcp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Clustrix
        plumbing.clustrix = convert_clustrix_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Cockroach
        plumbing.cockroach = convert_cockroach_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CouchbaseDatabase
        plumbing.couchbase_database = convert_couchbase_database_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CouchbaseWebUI
        plumbing.couchbase_web_ui = convert_couchbase_web_ui_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DB2I
        plumbing.db_2_i = convert_db_2_i_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DB2LUW
        plumbing.db_2_luw = convert_db_2_luw_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBHost
        plumbing.document_db_host = convert_document_db_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBHostIAM
        plumbing.document_db_host_iam = convert_document_db_host_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBReplicaSet
        plumbing.document_db_replica_set = convert_document_db_replica_set_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DocumentDBReplicaSetIAM
        plumbing.document_db_replica_set_iam = convert_document_db_replica_set_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Druid
        plumbing.druid = convert_druid_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DynamoDB
        plumbing.dynamo_db = convert_dynamo_db_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DynamoDBIAM
        plumbing.dynamo_dbiam = convert_dynamo_dbiam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Elastic
        plumbing.elastic = convert_elastic_to_plumbing(porcelain)
      end
      if porcelain.instance_of? ElasticacheRedis
        plumbing.elasticache_redis = convert_elasticache_redis_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCP
        plumbing.gcp = convert_gcp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCPConsole
        plumbing.gcp_console = convert_gcp_console_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCPWIF
        plumbing.gcpwif = convert_gcpwif_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GoogleGKE
        plumbing.google_gke = convert_google_gke_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GoogleGKEUserImpersonation
        plumbing.google_gke_user_impersonation = convert_google_gke_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Greenplum
        plumbing.greenplum = convert_greenplum_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPAuth
        plumbing.http_auth = convert_http_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPBasicAuth
        plumbing.http_basic_auth = convert_http_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? HTTPNoAuth
        plumbing.http_no_auth = convert_http_no_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Kubernetes
        plumbing.kubernetes = convert_kubernetes_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesBasicAuth
        plumbing.kubernetes_basic_auth = convert_kubernetes_basic_auth_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesPodIdentity
        plumbing.kubernetes_pod_identity = convert_kubernetes_pod_identity_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesServiceAccount
        plumbing.kubernetes_service_account = convert_kubernetes_service_account_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesServiceAccountUserImpersonation
        plumbing.kubernetes_service_account_user_impersonation = convert_kubernetes_service_account_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KubernetesUserImpersonation
        plumbing.kubernetes_user_impersonation = convert_kubernetes_user_impersonation_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Maria
        plumbing.maria = convert_maria_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Memcached
        plumbing.memcached = convert_memcached_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Memsql
        plumbing.memsql = convert_memsql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoHost
        plumbing.mongo_host = convert_mongo_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoLegacyHost
        plumbing.mongo_legacy_host = convert_mongo_legacy_host_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoLegacyReplicaset
        plumbing.mongo_legacy_replicaset = convert_mongo_legacy_replicaset_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoReplicaSet
        plumbing.mongo_replica_set = convert_mongo_replica_set_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MongoShardedCluster
        plumbing.mongo_sharded_cluster = convert_mongo_sharded_cluster_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MTLSMysql
        plumbing.mtls_mysql = convert_mtls_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? MTLSPostgres
        plumbing.mtls_postgres = convert_mtls_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Mysql
        plumbing.mysql = convert_mysql_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Neptune
        plumbing.neptune = convert_neptune_to_plumbing(porcelain)
      end
      if porcelain.instance_of? NeptuneIAM
        plumbing.neptune_iam = convert_neptune_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Oracle
        plumbing.oracle = convert_oracle_to_plumbing(porcelain)
      end
      if porcelain.instance_of? OracleNNE
        plumbing.oracle_nne = convert_oracle_nne_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Postgres
        plumbing.postgres = convert_postgres_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Presto
        plumbing.presto = convert_presto_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RabbitMQAMQP091
        plumbing.rabbit_mqamqp_091 = convert_rabbit_mqamqp_091_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RawTCP
        plumbing.raw_tcp = convert_raw_tcp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RDP
        plumbing.rdp = convert_rdp_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RDPCert
        plumbing.rdp_cert = convert_rdp_cert_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RDSPostgresIAM
        plumbing.rds_postgres_iam = convert_rds_postgres_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Redis
        plumbing.redis = convert_redis_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RedisCluster
        plumbing.redis_cluster = convert_redis_cluster_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Redshift
        plumbing.redshift = convert_redshift_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RedshiftIAM
        plumbing.redshift_iam = convert_redshift_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? RedshiftServerlessIAM
        plumbing.redshift_serverless_iam = convert_redshift_serverless_iam_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SingleStore
        plumbing.single_store = convert_single_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Snowflake
        plumbing.snowflake = convert_snowflake_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Snowsight
        plumbing.snowsight = convert_snowsight_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SQLServer
        plumbing.sql_server = convert_sql_server_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SQLServerAzureAD
        plumbing.sql_server_azure_ad = convert_sql_server_azure_ad_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SQLServerKerberosAD
        plumbing.sql_server_kerberos_ad = convert_sql_server_kerberos_ad_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSH
        plumbing.ssh = convert_ssh_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSHCert
        plumbing.ssh_cert = convert_ssh_cert_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSHCustomerKey
        plumbing.ssh_customer_key = convert_ssh_customer_key_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SSHPassword
        plumbing.ssh_password = convert_ssh_password_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Sybase
        plumbing.sybase = convert_sybase_to_plumbing(porcelain)
      end
      if porcelain.instance_of? SybaseIQ
        plumbing.sybase_iq = convert_sybase_iq_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Teradata
        plumbing.teradata = convert_teradata_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Trino
        plumbing.trino = convert_trino_to_plumbing(porcelain)
      end
      if porcelain.instance_of? Vertica
        plumbing.vertica = convert_vertica_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.aerospike != nil
        return convert_aerospike_to_porcelain(plumbing.aerospike)
      end
      if plumbing.aks != nil
        return convert_aks_to_porcelain(plumbing.aks)
      end
      if plumbing.aks_basic_auth != nil
        return convert_aks_basic_auth_to_porcelain(plumbing.aks_basic_auth)
      end
      if plumbing.aks_service_account != nil
        return convert_aks_service_account_to_porcelain(plumbing.aks_service_account)
      end
      if plumbing.aks_service_account_user_impersonation != nil
        return convert_aks_service_account_user_impersonation_to_porcelain(plumbing.aks_service_account_user_impersonation)
      end
      if plumbing.aks_user_impersonation != nil
        return convert_aks_user_impersonation_to_porcelain(plumbing.aks_user_impersonation)
      end
      if plumbing.amazon_eks != nil
        return convert_amazon_eks_to_porcelain(plumbing.amazon_eks)
      end
      if plumbing.amazon_eks_instance_profile != nil
        return convert_amazon_eks_instance_profile_to_porcelain(plumbing.amazon_eks_instance_profile)
      end
      if plumbing.amazon_eks_instance_profile_user_impersonation != nil
        return convert_amazon_eks_instance_profile_user_impersonation_to_porcelain(plumbing.amazon_eks_instance_profile_user_impersonation)
      end
      if plumbing.amazon_eks_user_impersonation != nil
        return convert_amazon_eks_user_impersonation_to_porcelain(plumbing.amazon_eks_user_impersonation)
      end
      if plumbing.amazon_es != nil
        return convert_amazon_es_to_porcelain(plumbing.amazon_es)
      end
      if plumbing.amazon_esiam != nil
        return convert_amazon_esiam_to_porcelain(plumbing.amazon_esiam)
      end
      if plumbing.amazon_mqamqp_091 != nil
        return convert_amazon_mqamqp_091_to_porcelain(plumbing.amazon_mqamqp_091)
      end
      if plumbing.athena != nil
        return convert_athena_to_porcelain(plumbing.athena)
      end
      if plumbing.athena_iam != nil
        return convert_athena_iam_to_porcelain(plumbing.athena_iam)
      end
      if plumbing.aurora_mysql != nil
        return convert_aurora_mysql_to_porcelain(plumbing.aurora_mysql)
      end
      if plumbing.aurora_mysql_iam != nil
        return convert_aurora_mysql_iam_to_porcelain(plumbing.aurora_mysql_iam)
      end
      if plumbing.aurora_postgres != nil
        return convert_aurora_postgres_to_porcelain(plumbing.aurora_postgres)
      end
      if plumbing.aurora_postgres_iam != nil
        return convert_aurora_postgres_iam_to_porcelain(plumbing.aurora_postgres_iam)
      end
      if plumbing.aws != nil
        return convert_aws_to_porcelain(plumbing.aws)
      end
      if plumbing.aws_console != nil
        return convert_aws_console_to_porcelain(plumbing.aws_console)
      end
      if plumbing.aws_console_static_key_pair != nil
        return convert_aws_console_static_key_pair_to_porcelain(plumbing.aws_console_static_key_pair)
      end
      if plumbing.aws_instance_profile != nil
        return convert_aws_instance_profile_to_porcelain(plumbing.aws_instance_profile)
      end
      if plumbing.azure != nil
        return convert_azure_to_porcelain(plumbing.azure)
      end
      if plumbing.azure_certificate != nil
        return convert_azure_certificate_to_porcelain(plumbing.azure_certificate)
      end
      if plumbing.azure_mysql != nil
        return convert_azure_mysql_to_porcelain(plumbing.azure_mysql)
      end
      if plumbing.azure_postgres != nil
        return convert_azure_postgres_to_porcelain(plumbing.azure_postgres)
      end
      if plumbing.azure_postgres_managed_identity != nil
        return convert_azure_postgres_managed_identity_to_porcelain(plumbing.azure_postgres_managed_identity)
      end
      if plumbing.big_query != nil
        return convert_big_query_to_porcelain(plumbing.big_query)
      end
      if plumbing.cassandra != nil
        return convert_cassandra_to_porcelain(plumbing.cassandra)
      end
      if plumbing.citus != nil
        return convert_citus_to_porcelain(plumbing.citus)
      end
      if plumbing.click_house_http != nil
        return convert_click_house_http_to_porcelain(plumbing.click_house_http)
      end
      if plumbing.click_house_my_sql != nil
        return convert_click_house_my_sql_to_porcelain(plumbing.click_house_my_sql)
      end
      if plumbing.click_house_tcp != nil
        return convert_click_house_tcp_to_porcelain(plumbing.click_house_tcp)
      end
      if plumbing.clustrix != nil
        return convert_clustrix_to_porcelain(plumbing.clustrix)
      end
      if plumbing.cockroach != nil
        return convert_cockroach_to_porcelain(plumbing.cockroach)
      end
      if plumbing.couchbase_database != nil
        return convert_couchbase_database_to_porcelain(plumbing.couchbase_database)
      end
      if plumbing.couchbase_web_ui != nil
        return convert_couchbase_web_ui_to_porcelain(plumbing.couchbase_web_ui)
      end
      if plumbing.db_2_i != nil
        return convert_db_2_i_to_porcelain(plumbing.db_2_i)
      end
      if plumbing.db_2_luw != nil
        return convert_db_2_luw_to_porcelain(plumbing.db_2_luw)
      end
      if plumbing.document_db_host != nil
        return convert_document_db_host_to_porcelain(plumbing.document_db_host)
      end
      if plumbing.document_db_host_iam != nil
        return convert_document_db_host_iam_to_porcelain(plumbing.document_db_host_iam)
      end
      if plumbing.document_db_replica_set != nil
        return convert_document_db_replica_set_to_porcelain(plumbing.document_db_replica_set)
      end
      if plumbing.document_db_replica_set_iam != nil
        return convert_document_db_replica_set_iam_to_porcelain(plumbing.document_db_replica_set_iam)
      end
      if plumbing.druid != nil
        return convert_druid_to_porcelain(plumbing.druid)
      end
      if plumbing.dynamo_db != nil
        return convert_dynamo_db_to_porcelain(plumbing.dynamo_db)
      end
      if plumbing.dynamo_dbiam != nil
        return convert_dynamo_dbiam_to_porcelain(plumbing.dynamo_dbiam)
      end
      if plumbing.elastic != nil
        return convert_elastic_to_porcelain(plumbing.elastic)
      end
      if plumbing.elasticache_redis != nil
        return convert_elasticache_redis_to_porcelain(plumbing.elasticache_redis)
      end
      if plumbing.gcp != nil
        return convert_gcp_to_porcelain(plumbing.gcp)
      end
      if plumbing.gcp_console != nil
        return convert_gcp_console_to_porcelain(plumbing.gcp_console)
      end
      if plumbing.gcpwif != nil
        return convert_gcpwif_to_porcelain(plumbing.gcpwif)
      end
      if plumbing.google_gke != nil
        return convert_google_gke_to_porcelain(plumbing.google_gke)
      end
      if plumbing.google_gke_user_impersonation != nil
        return convert_google_gke_user_impersonation_to_porcelain(plumbing.google_gke_user_impersonation)
      end
      if plumbing.greenplum != nil
        return convert_greenplum_to_porcelain(plumbing.greenplum)
      end
      if plumbing.http_auth != nil
        return convert_http_auth_to_porcelain(plumbing.http_auth)
      end
      if plumbing.http_basic_auth != nil
        return convert_http_basic_auth_to_porcelain(plumbing.http_basic_auth)
      end
      if plumbing.http_no_auth != nil
        return convert_http_no_auth_to_porcelain(plumbing.http_no_auth)
      end
      if plumbing.kubernetes != nil
        return convert_kubernetes_to_porcelain(plumbing.kubernetes)
      end
      if plumbing.kubernetes_basic_auth != nil
        return convert_kubernetes_basic_auth_to_porcelain(plumbing.kubernetes_basic_auth)
      end
      if plumbing.kubernetes_pod_identity != nil
        return convert_kubernetes_pod_identity_to_porcelain(plumbing.kubernetes_pod_identity)
      end
      if plumbing.kubernetes_service_account != nil
        return convert_kubernetes_service_account_to_porcelain(plumbing.kubernetes_service_account)
      end
      if plumbing.kubernetes_service_account_user_impersonation != nil
        return convert_kubernetes_service_account_user_impersonation_to_porcelain(plumbing.kubernetes_service_account_user_impersonation)
      end
      if plumbing.kubernetes_user_impersonation != nil
        return convert_kubernetes_user_impersonation_to_porcelain(plumbing.kubernetes_user_impersonation)
      end
      if plumbing.maria != nil
        return convert_maria_to_porcelain(plumbing.maria)
      end
      if plumbing.memcached != nil
        return convert_memcached_to_porcelain(plumbing.memcached)
      end
      if plumbing.memsql != nil
        return convert_memsql_to_porcelain(plumbing.memsql)
      end
      if plumbing.mongo_host != nil
        return convert_mongo_host_to_porcelain(plumbing.mongo_host)
      end
      if plumbing.mongo_legacy_host != nil
        return convert_mongo_legacy_host_to_porcelain(plumbing.mongo_legacy_host)
      end
      if plumbing.mongo_legacy_replicaset != nil
        return convert_mongo_legacy_replicaset_to_porcelain(plumbing.mongo_legacy_replicaset)
      end
      if plumbing.mongo_replica_set != nil
        return convert_mongo_replica_set_to_porcelain(plumbing.mongo_replica_set)
      end
      if plumbing.mongo_sharded_cluster != nil
        return convert_mongo_sharded_cluster_to_porcelain(plumbing.mongo_sharded_cluster)
      end
      if plumbing.mtls_mysql != nil
        return convert_mtls_mysql_to_porcelain(plumbing.mtls_mysql)
      end
      if plumbing.mtls_postgres != nil
        return convert_mtls_postgres_to_porcelain(plumbing.mtls_postgres)
      end
      if plumbing.mysql != nil
        return convert_mysql_to_porcelain(plumbing.mysql)
      end
      if plumbing.neptune != nil
        return convert_neptune_to_porcelain(plumbing.neptune)
      end
      if plumbing.neptune_iam != nil
        return convert_neptune_iam_to_porcelain(plumbing.neptune_iam)
      end
      if plumbing.oracle != nil
        return convert_oracle_to_porcelain(plumbing.oracle)
      end
      if plumbing.oracle_nne != nil
        return convert_oracle_nne_to_porcelain(plumbing.oracle_nne)
      end
      if plumbing.postgres != nil
        return convert_postgres_to_porcelain(plumbing.postgres)
      end
      if plumbing.presto != nil
        return convert_presto_to_porcelain(plumbing.presto)
      end
      if plumbing.rabbit_mqamqp_091 != nil
        return convert_rabbit_mqamqp_091_to_porcelain(plumbing.rabbit_mqamqp_091)
      end
      if plumbing.raw_tcp != nil
        return convert_raw_tcp_to_porcelain(plumbing.raw_tcp)
      end
      if plumbing.rdp != nil
        return convert_rdp_to_porcelain(plumbing.rdp)
      end
      if plumbing.rdp_cert != nil
        return convert_rdp_cert_to_porcelain(plumbing.rdp_cert)
      end
      if plumbing.rds_postgres_iam != nil
        return convert_rds_postgres_iam_to_porcelain(plumbing.rds_postgres_iam)
      end
      if plumbing.redis != nil
        return convert_redis_to_porcelain(plumbing.redis)
      end
      if plumbing.redis_cluster != nil
        return convert_redis_cluster_to_porcelain(plumbing.redis_cluster)
      end
      if plumbing.redshift != nil
        return convert_redshift_to_porcelain(plumbing.redshift)
      end
      if plumbing.redshift_iam != nil
        return convert_redshift_iam_to_porcelain(plumbing.redshift_iam)
      end
      if plumbing.redshift_serverless_iam != nil
        return convert_redshift_serverless_iam_to_porcelain(plumbing.redshift_serverless_iam)
      end
      if plumbing.single_store != nil
        return convert_single_store_to_porcelain(plumbing.single_store)
      end
      if plumbing.snowflake != nil
        return convert_snowflake_to_porcelain(plumbing.snowflake)
      end
      if plumbing.snowsight != nil
        return convert_snowsight_to_porcelain(plumbing.snowsight)
      end
      if plumbing.sql_server != nil
        return convert_sql_server_to_porcelain(plumbing.sql_server)
      end
      if plumbing.sql_server_azure_ad != nil
        return convert_sql_server_azure_ad_to_porcelain(plumbing.sql_server_azure_ad)
      end
      if plumbing.sql_server_kerberos_ad != nil
        return convert_sql_server_kerberos_ad_to_porcelain(plumbing.sql_server_kerberos_ad)
      end
      if plumbing.ssh != nil
        return convert_ssh_to_porcelain(plumbing.ssh)
      end
      if plumbing.ssh_cert != nil
        return convert_ssh_cert_to_porcelain(plumbing.ssh_cert)
      end
      if plumbing.ssh_customer_key != nil
        return convert_ssh_customer_key_to_porcelain(plumbing.ssh_customer_key)
      end
      if plumbing.ssh_password != nil
        return convert_ssh_password_to_porcelain(plumbing.ssh_password)
      end
      if plumbing.sybase != nil
        return convert_sybase_to_porcelain(plumbing.sybase)
      end
      if plumbing.sybase_iq != nil
        return convert_sybase_iq_to_porcelain(plumbing.sybase_iq)
      end
      if plumbing.teradata != nil
        return convert_teradata_to_porcelain(plumbing.teradata)
      end
      if plumbing.trino != nil
        return convert_trino_to_porcelain(plumbing.trino)
      end
      if plumbing.vertica != nil
        return convert_vertica_to_porcelain(plumbing.vertica)
      end
      raise UnknownError.new("unknown polymorphic type, please upgrade your SDK")
    end
    def self.convert_repeated_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_resource_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_resource_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_healthcheck_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceHealthcheckRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_resource_healthcheck_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceHealthcheckRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_resource_healthcheck_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_healthcheck_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_healthcheck_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_healthcheck_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_healthcheck_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceHealthcheckResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_resource_healthcheck_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceHealthcheckResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_resource_healthcheck_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_healthcheck_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_healthcheck_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_healthcheck_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_resource_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_resource_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_resource_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = ResourceUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.resource = convert_resource_to_porcelain(plumbing.resource)
      porcelain
    end

    def self.convert_resource_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::ResourceUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.resource = convert_resource_to_plumbing(porcelain.resource)
      plumbing
    end
    def self.convert_repeated_resource_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_resource_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_resource_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_resource_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Role.new()
      porcelain.access_rules = convert_access_rules_to_porcelain(plumbing.access_rules)
      porcelain.id = (plumbing.id)
      porcelain.managed_by = (plumbing.managed_by)
      porcelain.name = (plumbing.name)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_role_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Role.new()
      plumbing.access_rules = convert_access_rules_to_plumbing(porcelain.access_rules)
      plumbing.id = (porcelain.id)
      plumbing.managed_by = (porcelain.managed_by)
      plumbing.name = (porcelain.name)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_role_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_role_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_role_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_role_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_role_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_resource_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleResource.new()
      porcelain.granted_at = convert_timestamp_to_porcelain(plumbing.granted_at)
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.role_id = (plumbing.role_id)
      porcelain
    end

    def self.convert_role_resource_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleResource.new()
      plumbing.granted_at = convert_timestamp_to_plumbing(porcelain.granted_at)
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.role_id = (porcelain.role_id)
      plumbing
    end
    def self.convert_repeated_role_resource_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_resource_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_resource_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_resource_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_resource_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleResourceHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.role_resource = convert_role_resource_to_porcelain(plumbing.role_resource)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_role_resource_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleResourceHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.role_resource = convert_role_resource_to_plumbing(porcelain.role_resource)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_role_resource_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_resource_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_resource_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_resource_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_role_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = RoleUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.role = convert_role_to_porcelain(plumbing.role)
      porcelain
    end

    def self.convert_role_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::RoleUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.role = convert_role_to_plumbing(porcelain.role)
      plumbing
    end
    def self.convert_repeated_role_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_role_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_role_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_role_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sql_server_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SQLServer.new()
      porcelain.allow_deprecated_encryption = (plumbing.allow_deprecated_encryption)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.schema = (plumbing.schema)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sql_server_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SQLServer.new()
      plumbing.allow_deprecated_encryption = (porcelain.allow_deprecated_encryption)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.schema = (porcelain.schema)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sql_server_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sql_server_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sql_server_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sql_server_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sql_server_azure_ad_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SQLServerAzureAD.new()
      porcelain.allow_deprecated_encryption = (plumbing.allow_deprecated_encryption)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.client_id = (plumbing.client_id)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.schema = (plumbing.schema)
      porcelain.secret = (plumbing.secret)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tenant_id = (plumbing.tenant_id)
      porcelain
    end

    def self.convert_sql_server_azure_ad_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SQLServerAzureAD.new()
      plumbing.allow_deprecated_encryption = (porcelain.allow_deprecated_encryption)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.client_id = (porcelain.client_id)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.schema = (porcelain.schema)
      plumbing.secret = (porcelain.secret)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tenant_id = (porcelain.tenant_id)
      plumbing
    end
    def self.convert_repeated_sql_server_azure_ad_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sql_server_azure_ad_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sql_server_azure_ad_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sql_server_azure_ad_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sql_server_kerberos_ad_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SQLServerKerberosAD.new()
      porcelain.allow_deprecated_encryption = (plumbing.allow_deprecated_encryption)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.keytab = (plumbing.keytab)
      porcelain.krb_config = (plumbing.krb_config)
      porcelain.name = (plumbing.name)
      porcelain.override_database = (plumbing.override_database)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.realm = (plumbing.realm)
      porcelain.schema = (plumbing.schema)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.server_spn = (plumbing.server_spn)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sql_server_kerberos_ad_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SQLServerKerberosAD.new()
      plumbing.allow_deprecated_encryption = (porcelain.allow_deprecated_encryption)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.keytab = (porcelain.keytab)
      plumbing.krb_config = (porcelain.krb_config)
      plumbing.name = (porcelain.name)
      plumbing.override_database = (porcelain.override_database)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.realm = (porcelain.realm)
      plumbing.schema = (porcelain.schema)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.server_spn = (porcelain.server_spn)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sql_server_kerberos_ad_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sql_server_kerberos_ad_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sql_server_kerberos_ad_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sql_server_kerberos_ad_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSH.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.key_type = (plumbing.key_type)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.public_key = (plumbing.public_key)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSH.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.key_type = (porcelain.key_type)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.public_key = (porcelain.public_key)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_cert_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSHCert.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.key_type = (plumbing.key_type)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_cert_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSHCert.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.key_type = (porcelain.key_type)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_cert_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_cert_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_cert_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_cert_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_customer_key_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSHCustomerKey.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.identity_alias_healthcheck_username = (plumbing.identity_alias_healthcheck_username)
      porcelain.identity_set_id = (plumbing.identity_set_id)
      porcelain.name = (plumbing.name)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.private_key = (plumbing.private_key)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_customer_key_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSHCustomerKey.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.identity_alias_healthcheck_username = (porcelain.identity_alias_healthcheck_username)
      plumbing.identity_set_id = (porcelain.identity_set_id)
      plumbing.name = (porcelain.name)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.private_key = (porcelain.private_key)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_customer_key_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_customer_key_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_customer_key_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_customer_key_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_ssh_password_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SSHPassword.new()
      porcelain.allow_deprecated_key_exchanges = (plumbing.allow_deprecated_key_exchanges)
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_forwarding = (plumbing.port_forwarding)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_ssh_password_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SSHPassword.new()
      plumbing.allow_deprecated_key_exchanges = (porcelain.allow_deprecated_key_exchanges)
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_forwarding = (porcelain.port_forwarding)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_ssh_password_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_ssh_password_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_ssh_password_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_ssh_password_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngine.new()
      if porcelain.instance_of? ActiveDirectoryEngine
        plumbing.active_directory = convert_active_directory_engine_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KeyValueEngine
        plumbing.key_value = convert_key_value_engine_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_secret_engine_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.active_directory != nil
        return convert_active_directory_engine_to_porcelain(plumbing.active_directory)
      end
      if plumbing.key_value != nil
        return convert_key_value_engine_to_porcelain(plumbing.key_value)
      end
      raise UnknownError.new("unknown polymorphic type, please upgrade your SDK")
    end
    def self.convert_repeated_secret_engine_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_create_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineCreateRequest.new()
      porcelain.secret_engine = convert_secret_engine_to_porcelain(plumbing.secret_engine)
      porcelain
    end

    def self.convert_secret_engine_create_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineCreateRequest.new()
      plumbing.secret_engine = convert_secret_engine_to_plumbing(porcelain.secret_engine)
      plumbing
    end
    def self.convert_repeated_secret_engine_create_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_create_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_create_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_create_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_engine = convert_secret_engine_to_porcelain(plumbing.secret_engine)
      porcelain
    end

    def self.convert_secret_engine_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_engine = convert_secret_engine_to_plumbing(porcelain.secret_engine)
      plumbing
    end
    def self.convert_repeated_secret_engine_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_delete_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineDeleteRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_secret_engine_delete_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineDeleteRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_secret_engine_delete_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_delete_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_delete_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_delete_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineDeleteResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_engine_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineDeleteResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_engine_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_get_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineGetRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_secret_engine_get_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineGetRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_secret_engine_get_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_get_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_get_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_get_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_engine = convert_secret_engine_to_porcelain(plumbing.secret_engine)
      porcelain
    end

    def self.convert_secret_engine_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_engine = convert_secret_engine_to_plumbing(porcelain.secret_engine)
      plumbing
    end
    def self.convert_repeated_secret_engine_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_secret_engine_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_secret_engine_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_engine_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_engine_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_password_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEnginePasswordPolicy.new()
      porcelain.allow_repeat = (plumbing.allow_repeat)
      porcelain.exclude_characters = (plumbing.exclude_characters)
      porcelain.exclude_upper_case = (plumbing.exclude_upper_case)
      porcelain.length = (plumbing.length)
      porcelain.num_digits = (plumbing.num_digits)
      porcelain.num_symbols = (plumbing.num_symbols)
      porcelain
    end

    def self.convert_secret_engine_password_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEnginePasswordPolicy.new()
      plumbing.allow_repeat = (porcelain.allow_repeat)
      plumbing.exclude_characters = (porcelain.exclude_characters)
      plumbing.exclude_upper_case = (porcelain.exclude_upper_case)
      plumbing.length = (porcelain.length)
      plumbing.num_digits = (porcelain.num_digits)
      plumbing.num_symbols = (porcelain.num_symbols)
      plumbing
    end
    def self.convert_repeated_secret_engine_password_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_password_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_password_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_password_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_policy_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEnginePolicy.new()
      porcelain.password_policy = convert_secret_engine_password_policy_to_porcelain(plumbing.password_policy)
      porcelain
    end

    def self.convert_secret_engine_policy_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEnginePolicy.new()
      plumbing.password_policy = convert_secret_engine_password_policy_to_plumbing(porcelain.password_policy)
      plumbing
    end
    def self.convert_repeated_secret_engine_policy_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_policy_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_policy_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_policy_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_rotate_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineRotateRequest.new()
      porcelain.id = (plumbing.id)
      porcelain.password_policy = convert_secret_engine_password_policy_to_porcelain(plumbing.password_policy)
      porcelain
    end

    def self.convert_secret_engine_rotate_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineRotateRequest.new()
      plumbing.id = (porcelain.id)
      plumbing.password_policy = convert_secret_engine_password_policy_to_plumbing(porcelain.password_policy)
      plumbing
    end
    def self.convert_repeated_secret_engine_rotate_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_rotate_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_rotate_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_rotate_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_rotate_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineRotateResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_engine_rotate_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineRotateResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_engine_rotate_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_rotate_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_rotate_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_rotate_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_update_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineUpdateRequest.new()
      porcelain.secret_engine = convert_secret_engine_to_porcelain(plumbing.secret_engine)
      porcelain
    end

    def self.convert_secret_engine_update_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineUpdateRequest.new()
      plumbing.secret_engine = convert_secret_engine_to_plumbing(porcelain.secret_engine)
      plumbing
    end
    def self.convert_repeated_secret_engine_update_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_update_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_update_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_update_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_engine_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretEngineUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_engine = convert_secret_engine_to_porcelain(plumbing.secret_engine)
      porcelain
    end

    def self.convert_secret_engine_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretEngineUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_engine = convert_secret_engine_to_plumbing(porcelain.secret_engine)
      plumbing
    end
    def self.convert_repeated_secret_engine_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_engine_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_engine_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_engine_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStore.new()
      if porcelain.instance_of? ActiveDirectoryStore
        plumbing.active_directory = convert_active_directory_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSStore
        plumbing.aws = convert_aws_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AWSCertX509Store
        plumbing.aws_cert_x_509 = convert_aws_cert_x_509_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? AzureStore
        plumbing.azure = convert_azure_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CyberarkConjurStore
        plumbing.cyberark_conjur = convert_cyberark_conjur_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CyberarkPAMStore
        plumbing.cyberark_pam = convert_cyberark_pam_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? CyberarkPAMExperimentalStore
        plumbing.cyberark_pam_experimental = convert_cyberark_pam_experimental_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? DelineaStore
        plumbing.delinea = convert_delinea_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCPStore
        plumbing.gcp = convert_gcp_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? GCPCertX509Store
        plumbing.gcp_cert_x_509 = convert_gcp_cert_x_509_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KeyfactorSSHStore
        plumbing.keyfactor_ssh = convert_keyfactor_ssh_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? KeyfactorX509Store
        plumbing.keyfactor_x_509 = convert_keyfactor_x_509_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAppRoleStore
        plumbing.vault_app_role = convert_vault_app_role_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAppRoleCertSSHStore
        plumbing.vault_app_role_cert_ssh = convert_vault_app_role_cert_ssh_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAppRoleCertX509Store
        plumbing.vault_app_role_cert_x_509 = convert_vault_app_role_cert_x_509_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAWSEC2Store
        plumbing.vault_awsec_2 = convert_vault_awsec_2_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultAWSIAMStore
        plumbing.vault_awsiam = convert_vault_awsiam_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTLSStore
        plumbing.vault_tls = convert_vault_tls_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTLSCertSSHStore
        plumbing.vault_tls_cert_ssh = convert_vault_tls_cert_ssh_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTLSCertX509Store
        plumbing.vault_tls_cert_x_509 = convert_vault_tls_cert_x_509_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTokenStore
        plumbing.vault_token = convert_vault_token_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTokenCertSSHStore
        plumbing.vault_token_cert_ssh = convert_vault_token_cert_ssh_store_to_plumbing(porcelain)
      end
      if porcelain.instance_of? VaultTokenCertX509Store
        plumbing.vault_token_cert_x_509 = convert_vault_token_cert_x_509_store_to_plumbing(porcelain)
      end
      plumbing
    end

    def self.convert_secret_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      if plumbing.active_directory != nil
        return convert_active_directory_store_to_porcelain(plumbing.active_directory)
      end
      if plumbing.aws != nil
        return convert_aws_store_to_porcelain(plumbing.aws)
      end
      if plumbing.aws_cert_x_509 != nil
        return convert_aws_cert_x_509_store_to_porcelain(plumbing.aws_cert_x_509)
      end
      if plumbing.azure != nil
        return convert_azure_store_to_porcelain(plumbing.azure)
      end
      if plumbing.cyberark_conjur != nil
        return convert_cyberark_conjur_store_to_porcelain(plumbing.cyberark_conjur)
      end
      if plumbing.cyberark_pam != nil
        return convert_cyberark_pam_store_to_porcelain(plumbing.cyberark_pam)
      end
      if plumbing.cyberark_pam_experimental != nil
        return convert_cyberark_pam_experimental_store_to_porcelain(plumbing.cyberark_pam_experimental)
      end
      if plumbing.delinea != nil
        return convert_delinea_store_to_porcelain(plumbing.delinea)
      end
      if plumbing.gcp != nil
        return convert_gcp_store_to_porcelain(plumbing.gcp)
      end
      if plumbing.gcp_cert_x_509 != nil
        return convert_gcp_cert_x_509_store_to_porcelain(plumbing.gcp_cert_x_509)
      end
      if plumbing.keyfactor_ssh != nil
        return convert_keyfactor_ssh_store_to_porcelain(plumbing.keyfactor_ssh)
      end
      if plumbing.keyfactor_x_509 != nil
        return convert_keyfactor_x_509_store_to_porcelain(plumbing.keyfactor_x_509)
      end
      if plumbing.vault_app_role != nil
        return convert_vault_app_role_store_to_porcelain(plumbing.vault_app_role)
      end
      if plumbing.vault_app_role_cert_ssh != nil
        return convert_vault_app_role_cert_ssh_store_to_porcelain(plumbing.vault_app_role_cert_ssh)
      end
      if plumbing.vault_app_role_cert_x_509 != nil
        return convert_vault_app_role_cert_x_509_store_to_porcelain(plumbing.vault_app_role_cert_x_509)
      end
      if plumbing.vault_awsec_2 != nil
        return convert_vault_awsec_2_store_to_porcelain(plumbing.vault_awsec_2)
      end
      if plumbing.vault_awsiam != nil
        return convert_vault_awsiam_store_to_porcelain(plumbing.vault_awsiam)
      end
      if plumbing.vault_tls != nil
        return convert_vault_tls_store_to_porcelain(plumbing.vault_tls)
      end
      if plumbing.vault_tls_cert_ssh != nil
        return convert_vault_tls_cert_ssh_store_to_porcelain(plumbing.vault_tls_cert_ssh)
      end
      if plumbing.vault_tls_cert_x_509 != nil
        return convert_vault_tls_cert_x_509_store_to_porcelain(plumbing.vault_tls_cert_x_509)
      end
      if plumbing.vault_token != nil
        return convert_vault_token_store_to_porcelain(plumbing.vault_token)
      end
      if plumbing.vault_token_cert_ssh != nil
        return convert_vault_token_cert_ssh_store_to_porcelain(plumbing.vault_token_cert_ssh)
      end
      if plumbing.vault_token_cert_x_509 != nil
        return convert_vault_token_cert_x_509_store_to_porcelain(plumbing.vault_token_cert_x_509)
      end
      raise UnknownError.new("unknown polymorphic type, please upgrade your SDK")
    end
    def self.convert_repeated_secret_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreCreateResponse.new()
      porcelain.meta = convert_create_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreCreateResponse.new()
      plumbing.meta = convert_create_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreDeleteResponse.new()
      porcelain.meta = convert_delete_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_store_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreDeleteResponse.new()
      plumbing.meta = convert_delete_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_store_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_health_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreHealth.new()
      porcelain.changed_at = convert_timestamp_to_porcelain(plumbing.changed_at)
      porcelain.checked_at = convert_timestamp_to_porcelain(plumbing.checked_at)
      porcelain.error = (plumbing.error)
      porcelain.flags = (plumbing.flags)
      porcelain.node_id = (plumbing.node_id)
      porcelain.reachability = (plumbing.reachability)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.status = (plumbing.status)
      porcelain
    end

    def self.convert_secret_store_health_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreHealth.new()
      plumbing.changed_at = convert_timestamp_to_plumbing(porcelain.changed_at)
      plumbing.checked_at = convert_timestamp_to_plumbing(porcelain.checked_at)
      plumbing.error = (porcelain.error)
      plumbing.flags += (porcelain.flags)
      plumbing.node_id = (porcelain.node_id)
      plumbing.reachability = (porcelain.reachability)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.status = (porcelain.status)
      plumbing
    end
    def self.convert_repeated_secret_store_health_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_health_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_health_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_health_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_health_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreHealthListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_store_health_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreHealthListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_store_health_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_health_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_health_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_health_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_healthcheck_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreHealthcheckResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_secret_store_healthcheck_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreHealthcheckResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_secret_store_healthcheck_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_healthcheck_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_healthcheck_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_healthcheck_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain
    end

    def self.convert_secret_store_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing
    end
    def self.convert_repeated_secret_store_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_secret_store_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SecretStoreUpdateResponse.new()
      porcelain.meta = convert_update_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.secret_store = convert_secret_store_to_porcelain(plumbing.secret_store)
      porcelain
    end

    def self.convert_secret_store_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SecretStoreUpdateResponse.new()
      plumbing.meta = convert_update_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.secret_store = convert_secret_store_to_plumbing(porcelain.secret_store)
      plumbing
    end
    def self.convert_repeated_secret_store_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_secret_store_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_secret_store_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_secret_store_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_service_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Service.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.suspended = (plumbing.suspended)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_service_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Service.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.suspended = (porcelain.suspended)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_service_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_service_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_service_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_service_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_single_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SingleStore.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.require_native_auth = (plumbing.require_native_auth)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.use_azure_single_server_usernames = (plumbing.use_azure_single_server_usernames)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_single_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SingleStore.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.require_native_auth = (porcelain.require_native_auth)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.use_azure_single_server_usernames = (porcelain.use_azure_single_server_usernames)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_single_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_single_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_single_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_single_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_snowflake_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Snowflake.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.schema = (plumbing.schema)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_snowflake_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Snowflake.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.schema = (porcelain.schema)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_snowflake_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_snowflake_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_snowflake_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_snowflake_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_snowsight_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Snowsight.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthcheck_username = (plumbing.healthcheck_username)
      porcelain.healthy = (plumbing.healthy)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.samlmetadata = (plumbing.samlMetadata)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_snowsight_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Snowsight.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthcheck_username = (porcelain.healthcheck_username)
      plumbing.healthy = (porcelain.healthy)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.samlMetadata = (porcelain.samlmetadata)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_snowsight_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_snowsight_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_snowsight_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_snowsight_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sybase_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Sybase.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sybase_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Sybase.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sybase_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sybase_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sybase_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sybase_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_sybase_iq_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = SybaseIQ.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_sybase_iq_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::SybaseIQ.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_sybase_iq_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_sybase_iq_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_sybase_iq_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_sybase_iq_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_tag_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Tag.new()
      porcelain.name = (plumbing.name)
      porcelain.value = (plumbing.value)
      porcelain
    end

    def self.convert_tag_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Tag.new()
      plumbing.name = (porcelain.name)
      plumbing.value = (porcelain.value)
      plumbing
    end
    def self.convert_repeated_tag_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_tag_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_tag_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_tag_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_teradata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Teradata.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_teradata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Teradata.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_teradata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_teradata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_teradata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_teradata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_token_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Token.new()
      porcelain.account_type = (plumbing.account_type)
      porcelain.deadline = convert_timestamp_to_porcelain(plumbing.deadline)
      porcelain.duration = convert_duration_to_porcelain(plumbing.duration)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.permissions = (plumbing.permissions)
      porcelain.rekeyed = convert_timestamp_to_porcelain(plumbing.rekeyed)
      porcelain.suspended = (plumbing.suspended)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_token_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Token.new()
      plumbing.account_type = (porcelain.account_type)
      plumbing.deadline = convert_timestamp_to_plumbing(porcelain.deadline)
      plumbing.duration = convert_duration_to_plumbing(porcelain.duration)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.permissions += (porcelain.permissions)
      plumbing.rekeyed = convert_timestamp_to_plumbing(porcelain.rekeyed)
      plumbing.suspended = (porcelain.suspended)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_token_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_token_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_token_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_token_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_trino_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Trino.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.tls_required = (plumbing.tls_required)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_trino_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Trino.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.tls_required = (porcelain.tls_required)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_trino_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_trino_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_trino_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_trino_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_update_response_metadata_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = UpdateResponseMetadata.new()
      porcelain
    end

    def self.convert_update_response_metadata_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::UpdateResponseMetadata.new()
      plumbing
    end
    def self.convert_repeated_update_response_metadata_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_update_response_metadata_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_update_response_metadata_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_update_response_metadata_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_user_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = User.new()
      porcelain.scim = (plumbing.SCIM)
      porcelain.email = (plumbing.email)
      porcelain.external_id = (plumbing.external_id)
      porcelain.first_name = (plumbing.first_name)
      porcelain.id = (plumbing.id)
      porcelain.last_name = (plumbing.last_name)
      porcelain.managed_by = (plumbing.managed_by)
      porcelain.manager_id = (plumbing.manager_id)
      porcelain.password = (plumbing.password)
      porcelain.permission_level = (plumbing.permission_levelRW)
      porcelain.resolved_manager_id = (plumbing.resolved_manager_id)
      porcelain.suspended = (plumbing.suspendedRO)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_user_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::User.new()
      plumbing.SCIM = (porcelain.scim)
      plumbing.email = (porcelain.email)
      plumbing.external_id = (porcelain.external_id)
      plumbing.first_name = (porcelain.first_name)
      plumbing.id = (porcelain.id)
      plumbing.last_name = (porcelain.last_name)
      plumbing.managed_by = (porcelain.managed_by)
      plumbing.manager_id = (porcelain.manager_id)
      plumbing.password = (porcelain.password)
      plumbing.permission_levelRW = (porcelain.permission_level)
      plumbing.resolved_manager_id = (porcelain.resolved_manager_id)
      plumbing.suspendedRO = (porcelain.suspended)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_user_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_user_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_user_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_user_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_awsec_2_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAWSEC2Store.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_awsec_2_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAWSEC2Store.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_awsec_2_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_awsec_2_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_awsec_2_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_awsec_2_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_awsiam_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAWSIAMStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_awsiam_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAWSIAMStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_awsiam_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_awsiam_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_awsiam_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_awsiam_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_app_role_cert_ssh_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAppRoleCertSSHStore.new()
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.ssh_mount_point = (plumbing.ssh_mount_point)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_app_role_cert_ssh_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAppRoleCertSSHStore.new()
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.ssh_mount_point = (porcelain.ssh_mount_point)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_app_role_cert_ssh_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_app_role_cert_ssh_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_app_role_cert_ssh_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_app_role_cert_ssh_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_app_role_cert_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAppRoleCertX509Store.new()
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.pki_mount_point = (plumbing.pki_mount_point)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_app_role_cert_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAppRoleCertX509Store.new()
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.pki_mount_point = (porcelain.pki_mount_point)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_app_role_cert_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_app_role_cert_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_app_role_cert_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_app_role_cert_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_app_role_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultAppRoleStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_app_role_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultAppRoleStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_app_role_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_app_role_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_app_role_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_app_role_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_tls_cert_ssh_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTLSCertSSHStore.new()
      porcelain.ca_cert_path = (plumbing.CA_cert_path)
      porcelain.client_cert_path = (plumbing.client_cert_path)
      porcelain.client_key_path = (plumbing.client_key_path)
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.ssh_mount_point = (plumbing.ssh_mount_point)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_tls_cert_ssh_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTLSCertSSHStore.new()
      plumbing.CA_cert_path = (porcelain.ca_cert_path)
      plumbing.client_cert_path = (porcelain.client_cert_path)
      plumbing.client_key_path = (porcelain.client_key_path)
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.ssh_mount_point = (porcelain.ssh_mount_point)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_tls_cert_ssh_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_tls_cert_ssh_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_tls_cert_ssh_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_tls_cert_ssh_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_tls_cert_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTLSCertX509Store.new()
      porcelain.ca_cert_path = (plumbing.CA_cert_path)
      porcelain.client_cert_path = (plumbing.client_cert_path)
      porcelain.client_key_path = (plumbing.client_key_path)
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.pki_mount_point = (plumbing.pki_mount_point)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_tls_cert_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTLSCertX509Store.new()
      plumbing.CA_cert_path = (porcelain.ca_cert_path)
      plumbing.client_cert_path = (porcelain.client_cert_path)
      plumbing.client_key_path = (porcelain.client_key_path)
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.pki_mount_point = (porcelain.pki_mount_point)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_tls_cert_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_tls_cert_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_tls_cert_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_tls_cert_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_tls_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTLSStore.new()
      porcelain.ca_cert_path = (plumbing.CA_cert_path)
      porcelain.client_cert_path = (plumbing.client_cert_path)
      porcelain.client_key_path = (plumbing.client_key_path)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_tls_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTLSStore.new()
      plumbing.CA_cert_path = (porcelain.ca_cert_path)
      plumbing.client_cert_path = (porcelain.client_cert_path)
      plumbing.client_key_path = (porcelain.client_key_path)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_tls_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_tls_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_tls_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_tls_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_token_cert_ssh_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTokenCertSSHStore.new()
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.ssh_mount_point = (plumbing.ssh_mount_point)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_token_cert_ssh_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTokenCertSSHStore.new()
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.ssh_mount_point = (porcelain.ssh_mount_point)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_token_cert_ssh_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_token_cert_ssh_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_token_cert_ssh_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_token_cert_ssh_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_token_cert_x_509_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTokenCertX509Store.new()
      porcelain.id = (plumbing.id)
      porcelain.issuedcertttlminutes = (plumbing.issuedCertTTLMinutes)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.pki_mount_point = (plumbing.pki_mount_point)
      porcelain.server_address = (plumbing.server_address)
      porcelain.signing_role = (plumbing.signing_role)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_token_cert_x_509_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTokenCertX509Store.new()
      plumbing.id = (porcelain.id)
      plumbing.issuedCertTTLMinutes = (porcelain.issuedcertttlminutes)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.pki_mount_point = (porcelain.pki_mount_point)
      plumbing.server_address = (porcelain.server_address)
      plumbing.signing_role = (porcelain.signing_role)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_token_cert_x_509_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_token_cert_x_509_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_token_cert_x_509_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_token_cert_x_509_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vault_token_store_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = VaultTokenStore.new()
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.namespace = (plumbing.namespace)
      porcelain.server_address = (plumbing.server_address)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain
    end

    def self.convert_vault_token_store_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::VaultTokenStore.new()
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.namespace = (porcelain.namespace)
      plumbing.server_address = (porcelain.server_address)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing
    end
    def self.convert_repeated_vault_token_store_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vault_token_store_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vault_token_store_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vault_token_store_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_vertica_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Vertica.new()
      porcelain.bind_interface = (plumbing.bind_interface)
      porcelain.database = (plumbing.database)
      porcelain.egress_filter = (plumbing.egress_filter)
      porcelain.healthy = (plumbing.healthy)
      porcelain.hostname = (plumbing.hostname)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.password = (plumbing.password)
      porcelain.port = (plumbing.port)
      porcelain.port_override = (plumbing.port_override)
      porcelain.proxy_cluster_id = (plumbing.proxy_cluster_id)
      porcelain.secret_store_id = (plumbing.secret_store_id)
      porcelain.subdomain = (plumbing.subdomain)
      porcelain.tags = convert_tags_to_porcelain(plumbing.tags)
      porcelain.username = (plumbing.username)
      porcelain
    end

    def self.convert_vertica_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Vertica.new()
      plumbing.bind_interface = (porcelain.bind_interface)
      plumbing.database = (porcelain.database)
      plumbing.egress_filter = (porcelain.egress_filter)
      plumbing.healthy = (porcelain.healthy)
      plumbing.hostname = (porcelain.hostname)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.password = (porcelain.password)
      plumbing.port = (porcelain.port)
      plumbing.port_override = (porcelain.port_override)
      plumbing.proxy_cluster_id = (porcelain.proxy_cluster_id)
      plumbing.secret_store_id = (porcelain.secret_store_id)
      plumbing.subdomain = (porcelain.subdomain)
      plumbing.tags = convert_tags_to_plumbing(porcelain.tags)
      plumbing.username = (porcelain.username)
      plumbing
    end
    def self.convert_repeated_vertica_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_vertica_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_vertica_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_vertica_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = Workflow.new()
      porcelain.access_request_fixed_duration = convert_duration_to_porcelain(plumbing.access_request_fixed_duration)
      porcelain.access_request_max_duration = convert_duration_to_porcelain(plumbing.access_request_max_duration)
      porcelain.access_rules = convert_access_rules_to_porcelain(plumbing.access_rules)
      porcelain.approval_flow_id = (plumbing.approval_flow_id)
      porcelain.auto_grant = (plumbing.auto_grant)
      porcelain.description = (plumbing.description)
      porcelain.enabled = (plumbing.enabled)
      porcelain.id = (plumbing.id)
      porcelain.name = (plumbing.name)
      porcelain.weight = (plumbing.weight)
      porcelain
    end

    def self.convert_workflow_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::Workflow.new()
      plumbing.access_request_fixed_duration = convert_duration_to_plumbing(porcelain.access_request_fixed_duration)
      plumbing.access_request_max_duration = convert_duration_to_plumbing(porcelain.access_request_max_duration)
      plumbing.access_rules = convert_access_rules_to_plumbing(porcelain.access_rules)
      plumbing.approval_flow_id = (porcelain.approval_flow_id)
      plumbing.auto_grant = (porcelain.auto_grant)
      plumbing.description = (porcelain.description)
      plumbing.enabled = (porcelain.enabled)
      plumbing.id = (porcelain.id)
      plumbing.name = (porcelain.name)
      plumbing.weight = (porcelain.weight)
      plumbing
    end
    def self.convert_repeated_workflow_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approver_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApprover.new()
      porcelain.account_id = (plumbing.account_id)
      porcelain.id = (plumbing.id)
      porcelain.role_id = (plumbing.role_id)
      porcelain.workflow_id = (plumbing.workflow_id)
      porcelain
    end

    def self.convert_workflow_approver_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApprover.new()
      plumbing.account_id = (porcelain.account_id)
      plumbing.id = (porcelain.id)
      plumbing.role_id = (porcelain.role_id)
      plumbing.workflow_id = (porcelain.workflow_id)
      plumbing
    end
    def self.convert_repeated_workflow_approver_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approver_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approver_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approver_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approver_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproverGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow_approver = convert_workflow_approver_to_porcelain(plumbing.workflow_approver)
      porcelain
    end

    def self.convert_workflow_approver_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproverGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow_approver = convert_workflow_approver_to_plumbing(porcelain.workflow_approver)
      plumbing
    end
    def self.convert_repeated_workflow_approver_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approver_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approver_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approver_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approver_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproverHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain.workflow_approver = convert_workflow_approver_to_porcelain(plumbing.workflow_approver)
      porcelain
    end

    def self.convert_workflow_approver_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproverHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing.workflow_approver = convert_workflow_approver_to_plumbing(porcelain.workflow_approver)
      plumbing
    end
    def self.convert_repeated_workflow_approver_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approver_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approver_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approver_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_create_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversCreateRequest.new()
      porcelain.workflow_approver = convert_workflow_approver_to_porcelain(plumbing.workflow_approver)
      porcelain
    end

    def self.convert_workflow_approvers_create_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversCreateRequest.new()
      plumbing.workflow_approver = convert_workflow_approver_to_plumbing(porcelain.workflow_approver)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_create_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_create_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_create_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_create_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversCreateResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow_approver = convert_workflow_approver_to_porcelain(plumbing.workflow_approver)
      porcelain
    end

    def self.convert_workflow_approvers_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversCreateResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow_approver = convert_workflow_approver_to_plumbing(porcelain.workflow_approver)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_delete_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversDeleteRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_workflow_approvers_delete_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversDeleteRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_delete_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_delete_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_delete_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_delete_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversDeleteResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_approvers_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversDeleteResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_workflow_approvers_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_approvers_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowApproversListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_approvers_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowApproversListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_approvers_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_approvers_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_approvers_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_approvers_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_assignment_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowAssignment.new()
      porcelain.resource_id = (plumbing.resource_id)
      porcelain.workflow_id = (plumbing.workflow_id)
      porcelain
    end

    def self.convert_workflow_assignment_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowAssignment.new()
      plumbing.resource_id = (porcelain.resource_id)
      plumbing.workflow_id = (porcelain.workflow_id)
      plumbing
    end
    def self.convert_repeated_workflow_assignment_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_assignment_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_assignment_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_assignment_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_assignment_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowAssignmentHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain.workflow_assignment = convert_workflow_assignment_to_porcelain(plumbing.workflow_assignment)
      porcelain
    end

    def self.convert_workflow_assignment_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowAssignmentHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing.workflow_assignment = convert_workflow_assignment_to_plumbing(porcelain.workflow_assignment)
      plumbing
    end
    def self.convert_repeated_workflow_assignment_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_assignment_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_assignment_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_assignment_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_assignments_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowAssignmentsListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_workflow_assignments_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowAssignmentsListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_workflow_assignments_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_assignments_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_assignments_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_assignments_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_assignments_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowAssignmentsListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_assignments_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowAssignmentsListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_assignments_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_assignments_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_assignments_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_assignments_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowCreateResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow = convert_workflow_to_porcelain(plumbing.workflow)
      porcelain
    end

    def self.convert_workflow_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowCreateResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow = convert_workflow_to_plumbing(porcelain.workflow)
      plumbing
    end
    def self.convert_repeated_workflow_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowDeleteResponse.new()
      porcelain.id = (plumbing.id)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowDeleteResponse.new()
      plumbing.id = (porcelain.id)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow = convert_workflow_to_porcelain(plumbing.workflow)
      porcelain
    end

    def self.convert_workflow_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow = convert_workflow_to_plumbing(porcelain.workflow)
      plumbing
    end
    def self.convert_repeated_workflow_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain.workflow = convert_workflow_to_porcelain(plumbing.workflow)
      porcelain
    end

    def self.convert_workflow_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing.workflow = convert_workflow_to_plumbing(porcelain.workflow)
      plumbing
    end
    def self.convert_repeated_workflow_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_role_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRole.new()
      porcelain.id = (plumbing.id)
      porcelain.role_id = (plumbing.role_id)
      porcelain.workflow_id = (plumbing.workflow_id)
      porcelain
    end

    def self.convert_workflow_role_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRole.new()
      plumbing.id = (porcelain.id)
      plumbing.role_id = (porcelain.role_id)
      plumbing.workflow_id = (porcelain.workflow_id)
      plumbing
    end
    def self.convert_repeated_workflow_role_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_role_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_role_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_role_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_role_get_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRoleGetResponse.new()
      porcelain.meta = convert_get_response_metadata_to_porcelain(plumbing.meta)
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow_role = convert_workflow_role_to_porcelain(plumbing.workflow_role)
      porcelain
    end

    def self.convert_workflow_role_get_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRoleGetResponse.new()
      plumbing.meta = convert_get_response_metadata_to_plumbing(porcelain.meta)
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow_role = convert_workflow_role_to_plumbing(porcelain.workflow_role)
      plumbing
    end
    def self.convert_repeated_workflow_role_get_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_role_get_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_role_get_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_role_get_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_role_history_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRoleHistory.new()
      porcelain.activity_id = (plumbing.activity_id)
      porcelain.deleted_at = convert_timestamp_to_porcelain(plumbing.deleted_at)
      porcelain.timestamp = convert_timestamp_to_porcelain(plumbing.timestamp)
      porcelain.workflow_role = convert_workflow_role_to_porcelain(plumbing.workflow_role)
      porcelain
    end

    def self.convert_workflow_role_history_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRoleHistory.new()
      plumbing.activity_id = (porcelain.activity_id)
      plumbing.deleted_at = convert_timestamp_to_plumbing(porcelain.deleted_at)
      plumbing.timestamp = convert_timestamp_to_plumbing(porcelain.timestamp)
      plumbing.workflow_role = convert_workflow_role_to_plumbing(porcelain.workflow_role)
      plumbing
    end
    def self.convert_repeated_workflow_role_history_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_role_history_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_role_history_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_role_history_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_create_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesCreateRequest.new()
      porcelain.workflow_role = convert_workflow_role_to_porcelain(plumbing.workflow_role)
      porcelain
    end

    def self.convert_workflow_roles_create_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesCreateRequest.new()
      plumbing.workflow_role = convert_workflow_role_to_plumbing(porcelain.workflow_role)
      plumbing
    end
    def self.convert_repeated_workflow_roles_create_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_create_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_create_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_create_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_create_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesCreateResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow_role = convert_workflow_role_to_porcelain(plumbing.workflow_role)
      porcelain
    end

    def self.convert_workflow_roles_create_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesCreateResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow_role = convert_workflow_role_to_plumbing(porcelain.workflow_role)
      plumbing
    end
    def self.convert_repeated_workflow_roles_create_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_create_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_create_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_create_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_delete_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesDeleteRequest.new()
      porcelain.id = (plumbing.id)
      porcelain
    end

    def self.convert_workflow_roles_delete_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesDeleteRequest.new()
      plumbing.id = (porcelain.id)
      plumbing
    end
    def self.convert_repeated_workflow_roles_delete_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_delete_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_delete_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_delete_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_delete_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesDeleteResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_roles_delete_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesDeleteResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_roles_delete_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_delete_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_delete_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_delete_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_list_request_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesListRequest.new()
      porcelain.filter = (plumbing.filter)
      porcelain
    end

    def self.convert_workflow_roles_list_request_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesListRequest.new()
      plumbing.filter = (porcelain.filter)
      plumbing
    end
    def self.convert_repeated_workflow_roles_list_request_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_list_request_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_list_request_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_list_request_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_roles_list_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowRolesListResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain
    end

    def self.convert_workflow_roles_list_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowRolesListResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing
    end
    def self.convert_repeated_workflow_roles_list_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_roles_list_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_roles_list_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_roles_list_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_workflow_update_response_to_porcelain(plumbing)
      if plumbing == nil
        return nil
      end
      porcelain = WorkflowUpdateResponse.new()
      porcelain.rate_limit = convert_rate_limit_metadata_to_porcelain(plumbing.rate_limit)
      porcelain.workflow = convert_workflow_to_porcelain(plumbing.workflow)
      porcelain
    end

    def self.convert_workflow_update_response_to_plumbing(porcelain)
      if porcelain == nil
        return nil
      end
      plumbing = V1::WorkflowUpdateResponse.new()
      plumbing.rate_limit = convert_rate_limit_metadata_to_plumbing(porcelain.rate_limit)
      plumbing.workflow = convert_workflow_to_plumbing(porcelain.workflow)
      plumbing
    end
    def self.convert_repeated_workflow_update_response_to_plumbing(porcelains)
      items = Array.new
      porcelains.each do |porcelain|
        plumbing = convert_workflow_update_response_to_plumbing(porcelain)
        items.append(plumbing)
      end
      items
    end

    def self.convert_repeated_workflow_update_response_to_porcelain(plumbings)
      items = Array.new
      plumbings.each do |plumbing|
        porcelain = convert_workflow_update_response_to_porcelain(plumbing)
        items.append(porcelain)
      end
      items
    end
    def self.convert_error_to_porcelain(err)
      if not err.is_a? GRPC::BadStatus
        return UnknownError.new(err.message)
      end

      if err.code == 4
        return DeadlineExceededError.new(err.message)
      end

      status = err.to_rpc_status
      if status == nil
        return RPCError.new(err.message, err.code)
      end
      case err.code
      when 3
        return BadRequestError.new(err.message)
      when 5
        return NotFoundError.new(err.message)
      when 6
        return AlreadyExistsError.new(err.message)
      when 7
        return PermissionError.new(err.message)
      when 8
        status.details.each do |detail|
          if detail.type_url == "type.googleapis.com/v1.RateLimitMetadata"
            rate_limit = detail.unpack V1::RateLimitMetadata
            return RateLimitError.new(err.message, convert_rate_limit_metadata_to_porcelain(rate_limit))
          end
        end
      when 13
        return InternalError.new(err.message)
      when 16
        return AuthenticationError.new(err.message)
      end
      return RPCError.new(err.message, err.code)
    end
  end
end
